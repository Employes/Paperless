service: paperless

plugins:
  - serverless-s3-sync
  - serverless-cloudfront-invalidate
  - serverless-cloudflare-dns

custom:
  environment: ${opt:stage, self:provider.stage}
  hostedZoneName: employes.nl
  certificateArn: arn:aws:acm:eu-west-1:551346170247:certificate/a7d0d792-82a7-4794-b0c4-efdbbc0d08dc
  production:
    bucketName: paperless.employes.nl
  beta:
    bucketName: paperless-beta.employes.nl
  s3Sync:
    - bucketName: ${self:custom.${self:custom.environment}.bucketName}
      localDir: dist
      acl: public-read
      followSymlinks: true
      defaultContentType: text/html
      deleteRemoved: false
      params:
        - index.html:
            CacheControl: 'no-cache'
        - '*.js':
            CacheControl: 'public, max-age=31536000'
  cloudfrontInvalidate:
    - distributionIdKey: 'CDNDistributionId'
      items:
        - '/*'
  cloudflare:
    enabled: true
    domain: employes.nl

    auth:
      apiToken: gIAjCVCSD6HK11To60Hf9KGm4H0MDedzP0zC5ek-
    record:
      name: ${self:custom.${self:custom.environment}.bucketName}
      content: '#{cf:CloudFrontDistributionOutput}'

provider:
  name: aws
  runtime: nodejs14.x
  stage: development
  region: eu-west-1

resources:
  Resources:
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.${self:custom.environment}.bucketName}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
    S3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: S3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.${self:custom.environment}.bucketName}/*
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:custom.${self:custom.environment}.bucketName}.s3.amazonaws.com
              Id: WebFrontend
              S3OriginConfig:
                OriginAccessIdentity: ''
          Enabled: true
          Aliases:
            - ${self:custom.${self:custom.environment}.bucketName}
          DefaultRootObject: index.html
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            DefaultTTL: 30
            Compress: true
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            TargetOriginId: WebFrontend
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            AcmCertificateArn: ${self:custom.certificateArn}
            SslSupportMethod: sni-only

  ## In order to print out the hosted domain via `serverless info` we need to define the DomainName output for CloudFormation
  Outputs:
    CloudFrontDistributionOutput:
      Value:
        'Fn::GetAtt': [CloudFrontDistribution, DomainName]
    CDNDistributionId:
      Description: CDN distribution id.
      Value:
        Ref: CloudFrontDistribution
