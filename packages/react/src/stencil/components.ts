'use client';

/**
 * This file was automatically generated by the Stencil React Output Target.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 */

/* eslint-disable */

import { type PBackdropCustomEvent, type PButtonCustomEvent, type PDrawerCustomEvent, type PDrawerHeaderCustomEvent, type PFieldCustomEvent, type PFloatingMenuContainerCustomEvent, type PModalCustomEvent, type PModalHeaderCustomEvent, type PTableCustomEvent, type PTableHeaderCustomEvent, type PToastCustomEvent, type QuickFilter, type RowClickEvent } from "@paperless/core";
import { PAccordion as PAccordionElement, defineCustomElement as definePAccordion } from "@paperless/core/dist/components/p-accordion.js";
import { PAttachment as PAttachmentElement, defineCustomElement as definePAttachment } from "@paperless/core/dist/components/p-attachment.js";
import { PAvatarGroup as PAvatarGroupElement, defineCustomElement as definePAvatarGroup } from "@paperless/core/dist/components/p-avatar-group.js";
import { PAvatar as PAvatarElement, defineCustomElement as definePAvatar } from "@paperless/core/dist/components/p-avatar.js";
import { PBackdrop as PBackdropElement, defineCustomElement as definePBackdrop } from "@paperless/core/dist/components/p-backdrop.js";
import { PBadge as PBadgeElement, defineCustomElement as definePBadge } from "@paperless/core/dist/components/p-badge.js";
import { PButtonGroup as PButtonGroupElement, defineCustomElement as definePButtonGroup } from "@paperless/core/dist/components/p-button-group.js";
import { PButton as PButtonElement, defineCustomElement as definePButton } from "@paperless/core/dist/components/p-button.js";
import { PCalendar as PCalendarElement, defineCustomElement as definePCalendar } from "@paperless/core/dist/components/p-calendar.js";
import { PCardBody as PCardBodyElement, defineCustomElement as definePCardBody } from "@paperless/core/dist/components/p-card-body.js";
import { PCardContainer as PCardContainerElement, defineCustomElement as definePCardContainer } from "@paperless/core/dist/components/p-card-container.js";
import { PCardHeader as PCardHeaderElement, defineCustomElement as definePCardHeader } from "@paperless/core/dist/components/p-card-header.js";
import { PCheckbox as PCheckboxElement, defineCustomElement as definePCheckbox } from "@paperless/core/dist/components/p-checkbox.js";
import { PContentSlider as PContentSliderElement, defineCustomElement as definePContentSlider } from "@paperless/core/dist/components/p-content-slider.js";
import { PCounter as PCounterElement, defineCustomElement as definePCounter } from "@paperless/core/dist/components/p-counter.js";
import { PCropper as PCropperElement, defineCustomElement as definePCropper } from "@paperless/core/dist/components/p-cropper.js";
import { PDatepicker as PDatepickerElement, defineCustomElement as definePDatepicker } from "@paperless/core/dist/components/p-datepicker.js";
import { PDivider as PDividerElement, defineCustomElement as definePDivider } from "@paperless/core/dist/components/p-divider.js";
import { PDrawerBody as PDrawerBodyElement, defineCustomElement as definePDrawerBody } from "@paperless/core/dist/components/p-drawer-body.js";
import { PDrawerContainer as PDrawerContainerElement, defineCustomElement as definePDrawerContainer } from "@paperless/core/dist/components/p-drawer-container.js";
import { PDrawerHeader as PDrawerHeaderElement, defineCustomElement as definePDrawerHeader } from "@paperless/core/dist/components/p-drawer-header.js";
import { PDrawer as PDrawerElement, defineCustomElement as definePDrawer } from "@paperless/core/dist/components/p-drawer.js";
import { PDropdownMenuContainer as PDropdownMenuContainerElement, defineCustomElement as definePDropdownMenuContainer } from "@paperless/core/dist/components/p-dropdown-menu-container.js";
import { PDropdownMenuItem as PDropdownMenuItemElement, defineCustomElement as definePDropdownMenuItem } from "@paperless/core/dist/components/p-dropdown-menu-item.js";
import { PDropdown as PDropdownElement, defineCustomElement as definePDropdown } from "@paperless/core/dist/components/p-dropdown.js";
import { PFieldContainer as PFieldContainerElement, defineCustomElement as definePFieldContainer } from "@paperless/core/dist/components/p-field-container.js";
import { PField as PFieldElement, defineCustomElement as definePField } from "@paperless/core/dist/components/p-field.js";
import { PFloatingMenuContainer as PFloatingMenuContainerElement, defineCustomElement as definePFloatingMenuContainer } from "@paperless/core/dist/components/p-floating-menu-container.js";
import { PFloatingMenuItem as PFloatingMenuItemElement, defineCustomElement as definePFloatingMenuItem } from "@paperless/core/dist/components/p-floating-menu-item.js";
import { PHelper as PHelperElement, defineCustomElement as definePHelper } from "@paperless/core/dist/components/p-helper.js";
import { PIbanIcon as PIbanIconElement, defineCustomElement as definePIbanIcon } from "@paperless/core/dist/components/p-iban-icon.js";
import { PIconDeprecated as PIconDeprecatedElement, defineCustomElement as definePIconDeprecated } from "@paperless/core/dist/components/p-icon-deprecated.js";
import { PIcon as PIconElement, defineCustomElement as definePIcon } from "@paperless/core/dist/components/p-icon.js";
import { PIllustration as PIllustrationElement, defineCustomElement as definePIllustration } from "@paperless/core/dist/components/p-illustration.js";
import { PInfoPanel as PInfoPanelElement, defineCustomElement as definePInfoPanel } from "@paperless/core/dist/components/p-info-panel.js";
import { PInputError as PInputErrorElement, defineCustomElement as definePInputError } from "@paperless/core/dist/components/p-input-error.js";
import { PInputGroup as PInputGroupElement, defineCustomElement as definePInputGroup } from "@paperless/core/dist/components/p-input-group.js";
import { PLabel as PLabelElement, defineCustomElement as definePLabel } from "@paperless/core/dist/components/p-label.js";
import { PLayout as PLayoutElement, defineCustomElement as definePLayout } from "@paperless/core/dist/components/p-layout.js";
import { PLoader as PLoaderElement, defineCustomElement as definePLoader } from "@paperless/core/dist/components/p-loader.js";
import { PModalBody as PModalBodyElement, defineCustomElement as definePModalBody } from "@paperless/core/dist/components/p-modal-body.js";
import { PModalContainer as PModalContainerElement, defineCustomElement as definePModalContainer } from "@paperless/core/dist/components/p-modal-container.js";
import { PModalFooter as PModalFooterElement, defineCustomElement as definePModalFooter } from "@paperless/core/dist/components/p-modal-footer.js";
import { PModalHeader as PModalHeaderElement, defineCustomElement as definePModalHeader } from "@paperless/core/dist/components/p-modal-header.js";
import { PModal as PModalElement, defineCustomElement as definePModal } from "@paperless/core/dist/components/p-modal.js";
import { PNavbar as PNavbarElement, defineCustomElement as definePNavbar } from "@paperless/core/dist/components/p-navbar.js";
import { PNavigationItem as PNavigationItemElement, defineCustomElement as definePNavigationItem } from "@paperless/core/dist/components/p-navigation-item.js";
import { PNavigationSection as PNavigationSectionElement, defineCustomElement as definePNavigationSection } from "@paperless/core/dist/components/p-navigation-section.js";
import { PNavigationTitle as PNavigationTitleElement, defineCustomElement as definePNavigationTitle } from "@paperless/core/dist/components/p-navigation-title.js";
import { PPaginationPagesItem as PPaginationPagesItemElement, defineCustomElement as definePPaginationPagesItem } from "@paperless/core/dist/components/p-pagination-pages-item.js";
import { PPaginationPages as PPaginationPagesElement, defineCustomElement as definePPaginationPages } from "@paperless/core/dist/components/p-pagination-pages.js";
import { PPaginationSize as PPaginationSizeElement, defineCustomElement as definePPaginationSize } from "@paperless/core/dist/components/p-pagination-size.js";
import { PPagination as PPaginationElement, defineCustomElement as definePPagination } from "@paperless/core/dist/components/p-pagination.js";
import { PPortal as PPortalElement, defineCustomElement as definePPortal } from "@paperless/core/dist/components/p-portal.js";
import { PProfile as PProfileElement, defineCustomElement as definePProfile } from "@paperless/core/dist/components/p-profile.js";
import { PRadio as PRadioElement, defineCustomElement as definePRadio } from "@paperless/core/dist/components/p-radio.js";
import { PSegmentContainer as PSegmentContainerElement, defineCustomElement as definePSegmentContainer } from "@paperless/core/dist/components/p-segment-container.js";
import { PSegmentItem as PSegmentItemElement, defineCustomElement as definePSegmentItem } from "@paperless/core/dist/components/p-segment-item.js";
import { PSelect as PSelectElement, defineCustomElement as definePSelect } from "@paperless/core/dist/components/p-select.js";
import { PSliderIndicator as PSliderIndicatorElement, defineCustomElement as definePSliderIndicator } from "@paperless/core/dist/components/p-slider-indicator.js";
import { PStatus as PStatusElement, defineCustomElement as definePStatus } from "@paperless/core/dist/components/p-status.js";
import { PStepperItem as PStepperItemElement, defineCustomElement as definePStepperItem } from "@paperless/core/dist/components/p-stepper-item.js";
import { PStepperLine as PStepperLineElement, defineCustomElement as definePStepperLine } from "@paperless/core/dist/components/p-stepper-line.js";
import { PStepper as PStepperElement, defineCustomElement as definePStepper } from "@paperless/core/dist/components/p-stepper.js";
import { PTabGroup as PTabGroupElement, defineCustomElement as definePTabGroup } from "@paperless/core/dist/components/p-tab-group.js";
import { PTabItem as PTabItemElement, defineCustomElement as definePTabItem } from "@paperless/core/dist/components/p-tab-item.js";
import { PTableCell as PTableCellElement, defineCustomElement as definePTableCell } from "@paperless/core/dist/components/p-table-cell.js";
import { PTableColumn as PTableColumnElement, defineCustomElement as definePTableColumn } from "@paperless/core/dist/components/p-table-column.js";
import { PTableContainer as PTableContainerElement, defineCustomElement as definePTableContainer } from "@paperless/core/dist/components/p-table-container.js";
import { PTableFooter as PTableFooterElement, defineCustomElement as definePTableFooter } from "@paperless/core/dist/components/p-table-footer.js";
import { PTableHeader as PTableHeaderElement, defineCustomElement as definePTableHeader } from "@paperless/core/dist/components/p-table-header.js";
import { PTableRowAction as PTableRowActionElement, defineCustomElement as definePTableRowAction } from "@paperless/core/dist/components/p-table-row-action.js";
import { PTableRow as PTableRowElement, defineCustomElement as definePTableRow } from "@paperless/core/dist/components/p-table-row.js";
import { PTable as PTableElement, defineCustomElement as definePTable } from "@paperless/core/dist/components/p-table.js";
import { PToastContainer as PToastContainerElement, defineCustomElement as definePToastContainer } from "@paperless/core/dist/components/p-toast-container.js";
import { PToast as PToastElement, defineCustomElement as definePToast } from "@paperless/core/dist/components/p-toast.js";
import { PToggle as PToggleElement, defineCustomElement as definePToggle } from "@paperless/core/dist/components/p-toggle.js";
import { PTooltip as PTooltipElement, defineCustomElement as definePTooltip } from "@paperless/core/dist/components/p-tooltip.js";
import type { EventName, StencilReactComponent } from '@stencil/react-output-target/runtime';
import { createComponent } from '@stencil/react-output-target/runtime';
import React from 'react';

export type PAccordionEvents = { onIsOpen: EventName<CustomEvent<boolean>> };

export const PAccordion: StencilReactComponent<PAccordionElement, PAccordionEvents> = /*@__PURE__*/ createComponent<PAccordionElement, PAccordionEvents>({
    tagName: 'p-accordion',
    elementClass: PAccordionElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onIsOpen: 'isOpen' } as PAccordionEvents,
    defineCustomElement: definePAccordion
});

export type PAttachmentEvents = {
    onDownload: EventName<CustomEvent<any>>,
    onDelete: EventName<CustomEvent<any>>
};

export const PAttachment: StencilReactComponent<PAttachmentElement, PAttachmentEvents> = /*@__PURE__*/ createComponent<PAttachmentElement, PAttachmentEvents>({
    tagName: 'p-attachment',
    elementClass: PAttachmentElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onDownload: 'download',
        onDelete: 'delete'
    } as PAttachmentEvents,
    defineCustomElement: definePAttachment
});

export type PAvatarEvents = NonNullable<unknown>;

export const PAvatar: StencilReactComponent<PAvatarElement, PAvatarEvents> = /*@__PURE__*/ createComponent<PAvatarElement, PAvatarEvents>({
    tagName: 'p-avatar',
    elementClass: PAvatarElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PAvatarEvents,
    defineCustomElement: definePAvatar
});

export type PAvatarGroupEvents = NonNullable<unknown>;

export const PAvatarGroup: StencilReactComponent<PAvatarGroupElement, PAvatarGroupEvents> = /*@__PURE__*/ createComponent<PAvatarGroupElement, PAvatarGroupEvents>({
    tagName: 'p-avatar-group',
    elementClass: PAvatarGroupElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PAvatarGroupEvents,
    defineCustomElement: definePAvatarGroup
});

export type PBackdropEvents = { onClicked: EventName<PBackdropCustomEvent<MouseEvent>> };

export const PBackdrop: StencilReactComponent<PBackdropElement, PBackdropEvents> = /*@__PURE__*/ createComponent<PBackdropElement, PBackdropEvents>({
    tagName: 'p-backdrop',
    elementClass: PBackdropElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onClicked: 'clicked' } as PBackdropEvents,
    defineCustomElement: definePBackdrop
});

export type PBadgeEvents = NonNullable<unknown>;

export const PBadge: StencilReactComponent<PBadgeElement, PBadgeEvents> = /*@__PURE__*/ createComponent<PBadgeElement, PBadgeEvents>({
    tagName: 'p-badge',
    elementClass: PBadgeElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PBadgeEvents,
    defineCustomElement: definePBadge
});

export type PButtonEvents = { onOnClick: EventName<PButtonCustomEvent<MouseEvent>> };

export const PButton: StencilReactComponent<PButtonElement, PButtonEvents> = /*@__PURE__*/ createComponent<PButtonElement, PButtonEvents>({
    tagName: 'p-button',
    elementClass: PButtonElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onOnClick: 'onClick' } as PButtonEvents,
    defineCustomElement: definePButton
});

export type PButtonGroupEvents = NonNullable<unknown>;

export const PButtonGroup: StencilReactComponent<PButtonGroupElement, PButtonGroupEvents> = /*@__PURE__*/ createComponent<PButtonGroupElement, PButtonGroupEvents>({
    tagName: 'p-button-group',
    elementClass: PButtonGroupElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PButtonGroupEvents,
    defineCustomElement: definePButtonGroup
});

export type PCalendarEvents = { onValueChange: EventName<CustomEvent<any>> };

export const PCalendar: StencilReactComponent<PCalendarElement, PCalendarEvents> = /*@__PURE__*/ createComponent<PCalendarElement, PCalendarEvents>({
    tagName: 'p-calendar',
    elementClass: PCalendarElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onValueChange: 'valueChange' } as PCalendarEvents,
    defineCustomElement: definePCalendar
});

export type PCardBodyEvents = NonNullable<unknown>;

export const PCardBody: StencilReactComponent<PCardBodyElement, PCardBodyEvents> = /*@__PURE__*/ createComponent<PCardBodyElement, PCardBodyEvents>({
    tagName: 'p-card-body',
    elementClass: PCardBodyElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PCardBodyEvents,
    defineCustomElement: definePCardBody
});

export type PCardContainerEvents = NonNullable<unknown>;

export const PCardContainer: StencilReactComponent<PCardContainerElement, PCardContainerEvents> = /*@__PURE__*/ createComponent<PCardContainerElement, PCardContainerEvents>({
    tagName: 'p-card-container',
    elementClass: PCardContainerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PCardContainerEvents,
    defineCustomElement: definePCardContainer
});

export type PCardHeaderEvents = NonNullable<unknown>;

export const PCardHeader: StencilReactComponent<PCardHeaderElement, PCardHeaderEvents> = /*@__PURE__*/ createComponent<PCardHeaderElement, PCardHeaderEvents>({
    tagName: 'p-card-header',
    elementClass: PCardHeaderElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PCardHeaderEvents,
    defineCustomElement: definePCardHeader
});

export type PCheckboxEvents = {
    onCheckedChange: EventName<CustomEvent<boolean>>,
    onIndeterminateChange: EventName<CustomEvent<boolean>>
};

export const PCheckbox: StencilReactComponent<PCheckboxElement, PCheckboxEvents> = /*@__PURE__*/ createComponent<PCheckboxElement, PCheckboxEvents>({
    tagName: 'p-checkbox',
    elementClass: PCheckboxElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onCheckedChange: 'checkedChange',
        onIndeterminateChange: 'indeterminateChange'
    } as PCheckboxEvents,
    defineCustomElement: definePCheckbox
});

export type PContentSliderEvents = NonNullable<unknown>;

export const PContentSlider: StencilReactComponent<PContentSliderElement, PContentSliderEvents> = /*@__PURE__*/ createComponent<PContentSliderElement, PContentSliderEvents>({
    tagName: 'p-content-slider',
    elementClass: PContentSliderElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PContentSliderEvents,
    defineCustomElement: definePContentSlider
});

export type PCounterEvents = NonNullable<unknown>;

export const PCounter: StencilReactComponent<PCounterElement, PCounterEvents> = /*@__PURE__*/ createComponent<PCounterElement, PCounterEvents>({
    tagName: 'p-counter',
    elementClass: PCounterElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PCounterEvents,
    defineCustomElement: definePCounter
});

export type PCropperEvents = { onValueChange: EventName<CustomEvent<any>> };

export const PCropper: StencilReactComponent<PCropperElement, PCropperEvents> = /*@__PURE__*/ createComponent<PCropperElement, PCropperEvents>({
    tagName: 'p-cropper',
    elementClass: PCropperElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onValueChange: 'valueChange' } as PCropperEvents,
    defineCustomElement: definePCropper
});

export type PDatepickerEvents = { onValueChange: EventName<CustomEvent<any>> };

export const PDatepicker: StencilReactComponent<PDatepickerElement, PDatepickerEvents> = /*@__PURE__*/ createComponent<PDatepickerElement, PDatepickerEvents>({
    tagName: 'p-datepicker',
    elementClass: PDatepickerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onValueChange: 'valueChange' } as PDatepickerEvents,
    defineCustomElement: definePDatepicker
});

export type PDividerEvents = NonNullable<unknown>;

export const PDivider: StencilReactComponent<PDividerElement, PDividerEvents> = /*@__PURE__*/ createComponent<PDividerElement, PDividerEvents>({
    tagName: 'p-divider',
    elementClass: PDividerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PDividerEvents,
    defineCustomElement: definePDivider
});

export type PDrawerEvents = {
    onCloseClicked: EventName<PDrawerCustomEvent<{
        event: MouseEvent;
        canClose: boolean;
        source: 'unknown' | 'backdrop' | 'close' | 'event'
    }>>,
    onClosed: EventName<CustomEvent<null>>
};

export const PDrawer: StencilReactComponent<PDrawerElement, PDrawerEvents> = /*@__PURE__*/ createComponent<PDrawerElement, PDrawerEvents>({
    tagName: 'p-drawer',
    elementClass: PDrawerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onCloseClicked: 'closeClicked',
        onClosed: 'closed'
    } as PDrawerEvents,
    defineCustomElement: definePDrawer
});

export type PDrawerBodyEvents = NonNullable<unknown>;

export const PDrawerBody: StencilReactComponent<PDrawerBodyElement, PDrawerBodyEvents> = /*@__PURE__*/ createComponent<PDrawerBodyElement, PDrawerBodyEvents>({
    tagName: 'p-drawer-body',
    elementClass: PDrawerBodyElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PDrawerBodyEvents,
    defineCustomElement: definePDrawerBody
});

export type PDrawerContainerEvents = NonNullable<unknown>;

export const PDrawerContainer: StencilReactComponent<PDrawerContainerElement, PDrawerContainerEvents> = /*@__PURE__*/ createComponent<PDrawerContainerElement, PDrawerContainerEvents>({
    tagName: 'p-drawer-container',
    elementClass: PDrawerContainerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PDrawerContainerEvents,
    defineCustomElement: definePDrawerContainer
});

export type PDrawerHeaderEvents = { onClose: EventName<PDrawerHeaderCustomEvent<MouseEvent>> };

export const PDrawerHeader: StencilReactComponent<PDrawerHeaderElement, PDrawerHeaderEvents> = /*@__PURE__*/ createComponent<PDrawerHeaderElement, PDrawerHeaderEvents>({
    tagName: 'p-drawer-header',
    elementClass: PDrawerHeaderElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onClose: 'close' } as PDrawerHeaderEvents,
    defineCustomElement: definePDrawerHeader
});

export type PDropdownEvents = { onIsOpen: EventName<CustomEvent<boolean>> };

export const PDropdown: StencilReactComponent<PDropdownElement, PDropdownEvents> = /*@__PURE__*/ createComponent<PDropdownElement, PDropdownEvents>({
    tagName: 'p-dropdown',
    elementClass: PDropdownElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onIsOpen: 'isOpen' } as PDropdownEvents,
    defineCustomElement: definePDropdown
});

export type PDropdownMenuContainerEvents = NonNullable<unknown>;

export const PDropdownMenuContainer: StencilReactComponent<PDropdownMenuContainerElement, PDropdownMenuContainerEvents> = /*@__PURE__*/ createComponent<PDropdownMenuContainerElement, PDropdownMenuContainerEvents>({
    tagName: 'p-dropdown-menu-container',
    elementClass: PDropdownMenuContainerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PDropdownMenuContainerEvents,
    defineCustomElement: definePDropdownMenuContainer
});

export type PDropdownMenuItemEvents = NonNullable<unknown>;

export const PDropdownMenuItem: StencilReactComponent<PDropdownMenuItemElement, PDropdownMenuItemEvents> = /*@__PURE__*/ createComponent<PDropdownMenuItemElement, PDropdownMenuItemEvents>({
    tagName: 'p-dropdown-menu-item',
    elementClass: PDropdownMenuItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PDropdownMenuItemEvents,
    defineCustomElement: definePDropdownMenuItem
});

export type PFieldEvents = {
    onValueChange: EventName<CustomEvent<string>>,
    onInputRefChange: EventName<PFieldCustomEvent<HTMLInputElement | HTMLTextAreaElement>>
};

export const PField: StencilReactComponent<PFieldElement, PFieldEvents> = /*@__PURE__*/ createComponent<PFieldElement, PFieldEvents>({
    tagName: 'p-field',
    elementClass: PFieldElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onValueChange: 'valueChange',
        onInputRefChange: 'inputRefChange'
    } as PFieldEvents,
    defineCustomElement: definePField
});

export type PFieldContainerEvents = { onFocus: EventName<CustomEvent<void>> };

export const PFieldContainer: StencilReactComponent<PFieldContainerElement, PFieldContainerEvents> = /*@__PURE__*/ createComponent<PFieldContainerElement, PFieldContainerEvents>({
    tagName: 'p-field-container',
    elementClass: PFieldContainerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onFocus: 'focus' } as PFieldContainerEvents,
    defineCustomElement: definePFieldContainer
});

export type PFloatingMenuContainerEvents = { onClose: EventName<PFloatingMenuContainerCustomEvent<MouseEvent>> };

export const PFloatingMenuContainer: StencilReactComponent<PFloatingMenuContainerElement, PFloatingMenuContainerEvents> = /*@__PURE__*/ createComponent<PFloatingMenuContainerElement, PFloatingMenuContainerEvents>({
    tagName: 'p-floating-menu-container',
    elementClass: PFloatingMenuContainerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onClose: 'close' } as PFloatingMenuContainerEvents,
    defineCustomElement: definePFloatingMenuContainer
});

export type PFloatingMenuItemEvents = NonNullable<unknown>;

export const PFloatingMenuItem: StencilReactComponent<PFloatingMenuItemElement, PFloatingMenuItemEvents> = /*@__PURE__*/ createComponent<PFloatingMenuItemElement, PFloatingMenuItemEvents>({
    tagName: 'p-floating-menu-item',
    elementClass: PFloatingMenuItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PFloatingMenuItemEvents,
    defineCustomElement: definePFloatingMenuItem
});

export type PHelperEvents = NonNullable<unknown>;

export const PHelper: StencilReactComponent<PHelperElement, PHelperEvents> = /*@__PURE__*/ createComponent<PHelperElement, PHelperEvents>({
    tagName: 'p-helper',
    elementClass: PHelperElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PHelperEvents,
    defineCustomElement: definePHelper
});

export type PIbanIconEvents = NonNullable<unknown>;

export const PIbanIcon: StencilReactComponent<PIbanIconElement, PIbanIconEvents> = /*@__PURE__*/ createComponent<PIbanIconElement, PIbanIconEvents>({
    tagName: 'p-iban-icon',
    elementClass: PIbanIconElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PIbanIconEvents,
    defineCustomElement: definePIbanIcon
});

export type PIconEvents = NonNullable<unknown>;

export const PIcon: StencilReactComponent<PIconElement, PIconEvents> = /*@__PURE__*/ createComponent<PIconElement, PIconEvents>({
    tagName: 'p-icon',
    elementClass: PIconElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PIconEvents,
    defineCustomElement: definePIcon
});

export type PIconDeprecatedEvents = NonNullable<unknown>;

export const PIconDeprecated: StencilReactComponent<PIconDeprecatedElement, PIconDeprecatedEvents> = /*@__PURE__*/ createComponent<PIconDeprecatedElement, PIconDeprecatedEvents>({
    tagName: 'p-icon-deprecated',
    elementClass: PIconDeprecatedElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PIconDeprecatedEvents,
    defineCustomElement: definePIconDeprecated
});

export type PIllustrationEvents = NonNullable<unknown>;

export const PIllustration: StencilReactComponent<PIllustrationElement, PIllustrationEvents> = /*@__PURE__*/ createComponent<PIllustrationElement, PIllustrationEvents>({
    tagName: 'p-illustration',
    elementClass: PIllustrationElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PIllustrationEvents,
    defineCustomElement: definePIllustration
});

export type PInfoPanelEvents = { onClosed: EventName<CustomEvent<void>> };

export const PInfoPanel: StencilReactComponent<PInfoPanelElement, PInfoPanelEvents> = /*@__PURE__*/ createComponent<PInfoPanelElement, PInfoPanelEvents>({
    tagName: 'p-info-panel',
    elementClass: PInfoPanelElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onClosed: 'closed' } as PInfoPanelEvents,
    defineCustomElement: definePInfoPanel
});

export type PInputErrorEvents = NonNullable<unknown>;

export const PInputError: StencilReactComponent<PInputErrorElement, PInputErrorEvents> = /*@__PURE__*/ createComponent<PInputErrorElement, PInputErrorEvents>({
    tagName: 'p-input-error',
    elementClass: PInputErrorElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PInputErrorEvents,
    defineCustomElement: definePInputError
});

export type PInputGroupEvents = NonNullable<unknown>;

export const PInputGroup: StencilReactComponent<PInputGroupElement, PInputGroupEvents> = /*@__PURE__*/ createComponent<PInputGroupElement, PInputGroupEvents>({
    tagName: 'p-input-group',
    elementClass: PInputGroupElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PInputGroupEvents,
    defineCustomElement: definePInputGroup
});

export type PLabelEvents = NonNullable<unknown>;

export const PLabel: StencilReactComponent<PLabelElement, PLabelEvents> = /*@__PURE__*/ createComponent<PLabelElement, PLabelEvents>({
    tagName: 'p-label',
    elementClass: PLabelElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PLabelEvents,
    defineCustomElement: definePLabel
});

export type PLayoutEvents = NonNullable<unknown>;

export const PLayout: StencilReactComponent<PLayoutElement, PLayoutEvents> = /*@__PURE__*/ createComponent<PLayoutElement, PLayoutEvents>({
    tagName: 'p-layout',
    elementClass: PLayoutElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PLayoutEvents,
    defineCustomElement: definePLayout
});

export type PLoaderEvents = NonNullable<unknown>;

export const PLoader: StencilReactComponent<PLoaderElement, PLoaderEvents> = /*@__PURE__*/ createComponent<PLoaderElement, PLoaderEvents>({
    tagName: 'p-loader',
    elementClass: PLoaderElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PLoaderEvents,
    defineCustomElement: definePLoader
});

export type PModalEvents = {
    onCloseClicked: EventName<PModalCustomEvent<MouseEvent>>,
    onClosed: EventName<CustomEvent<string>>
};

export const PModal: StencilReactComponent<PModalElement, PModalEvents> = /*@__PURE__*/ createComponent<PModalElement, PModalEvents>({
    tagName: 'p-modal',
    elementClass: PModalElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onCloseClicked: 'closeClicked',
        onClosed: 'closed'
    } as PModalEvents,
    defineCustomElement: definePModal
});

export type PModalBodyEvents = NonNullable<unknown>;

export const PModalBody: StencilReactComponent<PModalBodyElement, PModalBodyEvents> = /*@__PURE__*/ createComponent<PModalBodyElement, PModalBodyEvents>({
    tagName: 'p-modal-body',
    elementClass: PModalBodyElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PModalBodyEvents,
    defineCustomElement: definePModalBody
});

export type PModalContainerEvents = NonNullable<unknown>;

export const PModalContainer: StencilReactComponent<PModalContainerElement, PModalContainerEvents> = /*@__PURE__*/ createComponent<PModalContainerElement, PModalContainerEvents>({
    tagName: 'p-modal-container',
    elementClass: PModalContainerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PModalContainerEvents,
    defineCustomElement: definePModalContainer
});

export type PModalFooterEvents = NonNullable<unknown>;

export const PModalFooter: StencilReactComponent<PModalFooterElement, PModalFooterEvents> = /*@__PURE__*/ createComponent<PModalFooterElement, PModalFooterEvents>({
    tagName: 'p-modal-footer',
    elementClass: PModalFooterElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PModalFooterEvents,
    defineCustomElement: definePModalFooter
});

export type PModalHeaderEvents = { onClose: EventName<PModalHeaderCustomEvent<MouseEvent>> };

export const PModalHeader: StencilReactComponent<PModalHeaderElement, PModalHeaderEvents> = /*@__PURE__*/ createComponent<PModalHeaderElement, PModalHeaderEvents>({
    tagName: 'p-modal-header',
    elementClass: PModalHeaderElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onClose: 'close' } as PModalHeaderEvents,
    defineCustomElement: definePModalHeader
});

export type PNavbarEvents = NonNullable<unknown>;

export const PNavbar: StencilReactComponent<PNavbarElement, PNavbarEvents> = /*@__PURE__*/ createComponent<PNavbarElement, PNavbarEvents>({
    tagName: 'p-navbar',
    elementClass: PNavbarElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PNavbarEvents,
    defineCustomElement: definePNavbar
});

export type PNavigationItemEvents = NonNullable<unknown>;

export const PNavigationItem: StencilReactComponent<PNavigationItemElement, PNavigationItemEvents> = /*@__PURE__*/ createComponent<PNavigationItemElement, PNavigationItemEvents>({
    tagName: 'p-navigation-item',
    elementClass: PNavigationItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PNavigationItemEvents,
    defineCustomElement: definePNavigationItem
});

export type PNavigationSectionEvents = NonNullable<unknown>;

export const PNavigationSection: StencilReactComponent<PNavigationSectionElement, PNavigationSectionEvents> = /*@__PURE__*/ createComponent<PNavigationSectionElement, PNavigationSectionEvents>({
    tagName: 'p-navigation-section',
    elementClass: PNavigationSectionElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PNavigationSectionEvents,
    defineCustomElement: definePNavigationSection
});

export type PNavigationTitleEvents = NonNullable<unknown>;

export const PNavigationTitle: StencilReactComponent<PNavigationTitleElement, PNavigationTitleEvents> = /*@__PURE__*/ createComponent<PNavigationTitleElement, PNavigationTitleEvents>({
    tagName: 'p-navigation-title',
    elementClass: PNavigationTitleElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PNavigationTitleEvents,
    defineCustomElement: definePNavigationTitle
});

export type PPaginationEvents = {
    onPageChange: EventName<CustomEvent<number>>,
    onPageSizeChange: EventName<CustomEvent<number>>
};

export const PPagination: StencilReactComponent<PPaginationElement, PPaginationEvents> = /*@__PURE__*/ createComponent<PPaginationElement, PPaginationEvents>({
    tagName: 'p-pagination',
    elementClass: PPaginationElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onPageChange: 'pageChange',
        onPageSizeChange: 'pageSizeChange'
    } as PPaginationEvents,
    defineCustomElement: definePPagination
});

export type PPaginationPagesEvents = {
    onPageChange: EventName<CustomEvent<number>>,
    onPagesChange: EventName<CustomEvent<number>>
};

export const PPaginationPages: StencilReactComponent<PPaginationPagesElement, PPaginationPagesEvents> = /*@__PURE__*/ createComponent<PPaginationPagesElement, PPaginationPagesEvents>({
    tagName: 'p-pagination-pages',
    elementClass: PPaginationPagesElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onPageChange: 'pageChange',
        onPagesChange: 'pagesChange'
    } as PPaginationPagesEvents,
    defineCustomElement: definePPaginationPages
});

export type PPaginationPagesItemEvents = NonNullable<unknown>;

export const PPaginationPagesItem: StencilReactComponent<PPaginationPagesItemElement, PPaginationPagesItemEvents> = /*@__PURE__*/ createComponent<PPaginationPagesItemElement, PPaginationPagesItemEvents>({
    tagName: 'p-pagination-pages-item',
    elementClass: PPaginationPagesItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PPaginationPagesItemEvents,
    defineCustomElement: definePPaginationPagesItem
});

export type PPaginationSizeEvents = { onSizeChange: EventName<CustomEvent<number>> };

export const PPaginationSize: StencilReactComponent<PPaginationSizeElement, PPaginationSizeEvents> = /*@__PURE__*/ createComponent<PPaginationSizeElement, PPaginationSizeEvents>({
    tagName: 'p-pagination-size',
    elementClass: PPaginationSizeElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onSizeChange: 'sizeChange' } as PPaginationSizeEvents,
    defineCustomElement: definePPaginationSize
});

export type PPortalEvents = NonNullable<unknown>;

export const PPortal: StencilReactComponent<PPortalElement, PPortalEvents> = /*@__PURE__*/ createComponent<PPortalElement, PPortalEvents>({
    tagName: 'p-portal',
    elementClass: PPortalElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PPortalEvents,
    defineCustomElement: definePPortal
});

export type PProfileEvents = NonNullable<unknown>;

export const PProfile: StencilReactComponent<PProfileElement, PProfileEvents> = /*@__PURE__*/ createComponent<PProfileElement, PProfileEvents>({
    tagName: 'p-profile',
    elementClass: PProfileElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PProfileEvents,
    defineCustomElement: definePProfile
});

export type PRadioEvents = { onCheckedChange: EventName<CustomEvent<boolean>> };

export const PRadio: StencilReactComponent<PRadioElement, PRadioEvents> = /*@__PURE__*/ createComponent<PRadioElement, PRadioEvents>({
    tagName: 'p-radio',
    elementClass: PRadioElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onCheckedChange: 'checkedChange' } as PRadioEvents,
    defineCustomElement: definePRadio
});

export type PSegmentContainerEvents = NonNullable<unknown>;

export const PSegmentContainer: StencilReactComponent<PSegmentContainerElement, PSegmentContainerEvents> = /*@__PURE__*/ createComponent<PSegmentContainerElement, PSegmentContainerEvents>({
    tagName: 'p-segment-container',
    elementClass: PSegmentContainerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PSegmentContainerEvents,
    defineCustomElement: definePSegmentContainer
});

export type PSegmentItemEvents = NonNullable<unknown>;

export const PSegmentItem: StencilReactComponent<PSegmentItemElement, PSegmentItemEvents> = /*@__PURE__*/ createComponent<PSegmentItemElement, PSegmentItemEvents>({
    tagName: 'p-segment-item',
    elementClass: PSegmentItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PSegmentItemEvents,
    defineCustomElement: definePSegmentItem
});

export type PSelectEvents = {
    onQueryChange: EventName<CustomEvent<string>>,
    onValueChange: EventName<CustomEvent<any>>,
    onSelectAllChange: EventName<CustomEvent<any>>,
    onDropdownShown: EventName<CustomEvent<any>>,
    onAdd: EventName<CustomEvent<any>>
};

export const PSelect: StencilReactComponent<PSelectElement, PSelectEvents> = /*@__PURE__*/ createComponent<PSelectElement, PSelectEvents>({
    tagName: 'p-select',
    elementClass: PSelectElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onQueryChange: 'queryChange',
        onValueChange: 'valueChange',
        onSelectAllChange: 'selectAllChange',
        onDropdownShown: 'dropdownShown',
        onAdd: 'add'
    } as PSelectEvents,
    defineCustomElement: definePSelect
});

export type PSliderIndicatorEvents = NonNullable<unknown>;

export const PSliderIndicator: StencilReactComponent<PSliderIndicatorElement, PSliderIndicatorEvents> = /*@__PURE__*/ createComponent<PSliderIndicatorElement, PSliderIndicatorEvents>({
    tagName: 'p-slider-indicator',
    elementClass: PSliderIndicatorElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PSliderIndicatorEvents,
    defineCustomElement: definePSliderIndicator
});

export type PStatusEvents = NonNullable<unknown>;

export const PStatus: StencilReactComponent<PStatusElement, PStatusEvents> = /*@__PURE__*/ createComponent<PStatusElement, PStatusEvents>({
    tagName: 'p-status',
    elementClass: PStatusElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PStatusEvents,
    defineCustomElement: definePStatus
});

export type PStepperEvents = NonNullable<unknown>;

export const PStepper: StencilReactComponent<PStepperElement, PStepperEvents> = /*@__PURE__*/ createComponent<PStepperElement, PStepperEvents>({
    tagName: 'p-stepper',
    elementClass: PStepperElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PStepperEvents,
    defineCustomElement: definePStepper
});

export type PStepperItemEvents = NonNullable<unknown>;

export const PStepperItem: StencilReactComponent<PStepperItemElement, PStepperItemEvents> = /*@__PURE__*/ createComponent<PStepperItemElement, PStepperItemEvents>({
    tagName: 'p-stepper-item',
    elementClass: PStepperItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PStepperItemEvents,
    defineCustomElement: definePStepperItem
});

export type PStepperLineEvents = NonNullable<unknown>;

export const PStepperLine: StencilReactComponent<PStepperLineElement, PStepperLineEvents> = /*@__PURE__*/ createComponent<PStepperLineElement, PStepperLineEvents>({
    tagName: 'p-stepper-line',
    elementClass: PStepperLineElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PStepperLineEvents,
    defineCustomElement: definePStepperLine
});

export type PTabGroupEvents = NonNullable<unknown>;

export const PTabGroup: StencilReactComponent<PTabGroupElement, PTabGroupEvents> = /*@__PURE__*/ createComponent<PTabGroupElement, PTabGroupEvents>({
    tagName: 'p-tab-group',
    elementClass: PTabGroupElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PTabGroupEvents,
    defineCustomElement: definePTabGroup
});

export type PTabItemEvents = NonNullable<unknown>;

export const PTabItem: StencilReactComponent<PTabItemElement, PTabItemEvents> = /*@__PURE__*/ createComponent<PTabItemElement, PTabItemEvents>({
    tagName: 'p-tab-item',
    elementClass: PTabItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PTabItemEvents,
    defineCustomElement: definePTabItem
});

export type PTableEvents = {
    onSelectedRowsChange: EventName<CustomEvent<any>>,
    onRowClick: EventName<PTableCustomEvent<RowClickEvent>>,
    onRowSelected: EventName<CustomEvent<any>>,
    onRowDeselected: EventName<CustomEvent<any>>,
    onHasRendered: EventName<CustomEvent<number>>,
    onQuickFilter: EventName<PTableCustomEvent<QuickFilter>>,
    onQueryChange: EventName<CustomEvent<string>>,
    onFilter: EventName<CustomEvent<null>>,
    onAction: EventName<CustomEvent<null>>,
    onPageChange: EventName<CustomEvent<number>>,
    onPageSizeChange: EventName<CustomEvent<number>>,
    onExport: EventName<CustomEvent<number>>,
    onEmptyStateActionClick: EventName<CustomEvent<null>>
};

export const PTable: StencilReactComponent<PTableElement, PTableEvents> = /*@__PURE__*/ createComponent<PTableElement, PTableEvents>({
    tagName: 'p-table',
    elementClass: PTableElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onSelectedRowsChange: 'selectedRowsChange',
        onRowClick: 'rowClick',
        onRowSelected: 'rowSelected',
        onRowDeselected: 'rowDeselected',
        onHasRendered: 'hasRendered',
        onQuickFilter: 'quickFilter',
        onQueryChange: 'queryChange',
        onFilter: 'filter',
        onAction: 'action',
        onPageChange: 'pageChange',
        onPageSizeChange: 'pageSizeChange',
        onExport: 'export',
        onEmptyStateActionClick: 'emptyStateActionClick'
    } as PTableEvents,
    defineCustomElement: definePTable
});

export type PTableCellEvents = NonNullable<unknown>;

export const PTableCell: StencilReactComponent<PTableCellElement, PTableCellEvents> = /*@__PURE__*/ createComponent<PTableCellElement, PTableCellEvents>({
    tagName: 'p-table-cell',
    elementClass: PTableCellElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PTableCellEvents,
    defineCustomElement: definePTableCell
});

export type PTableColumnEvents = { onTableDefinitionChanged: EventName<CustomEvent<boolean>> };

export const PTableColumn: StencilReactComponent<PTableColumnElement, PTableColumnEvents> = /*@__PURE__*/ createComponent<PTableColumnElement, PTableColumnEvents>({
    tagName: 'p-table-column',
    elementClass: PTableColumnElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onTableDefinitionChanged: 'tableDefinitionChanged' } as PTableColumnEvents,
    defineCustomElement: definePTableColumn
});

export type PTableContainerEvents = NonNullable<unknown>;

export const PTableContainer: StencilReactComponent<PTableContainerElement, PTableContainerEvents> = /*@__PURE__*/ createComponent<PTableContainerElement, PTableContainerEvents>({
    tagName: 'p-table-container',
    elementClass: PTableContainerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PTableContainerEvents,
    defineCustomElement: definePTableContainer
});

export type PTableFooterEvents = {
    onPageChange: EventName<CustomEvent<number>>,
    onPageSizeChange: EventName<CustomEvent<number>>,
    onExport: EventName<CustomEvent<number>>
};

export const PTableFooter: StencilReactComponent<PTableFooterElement, PTableFooterEvents> = /*@__PURE__*/ createComponent<PTableFooterElement, PTableFooterEvents>({
    tagName: 'p-table-footer',
    elementClass: PTableFooterElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onPageChange: 'pageChange',
        onPageSizeChange: 'pageSizeChange',
        onExport: 'export'
    } as PTableFooterEvents,
    defineCustomElement: definePTableFooter
});

export type PTableHeaderEvents = {
    onQuickFilter: EventName<PTableHeaderCustomEvent<QuickFilter>>,
    onQueryChange: EventName<CustomEvent<string>>,
    onFilter: EventName<CustomEvent<null>>,
    onAction: EventName<CustomEvent<null>>
};

export const PTableHeader: StencilReactComponent<PTableHeaderElement, PTableHeaderEvents> = /*@__PURE__*/ createComponent<PTableHeaderElement, PTableHeaderEvents>({
    tagName: 'p-table-header',
    elementClass: PTableHeaderElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onQuickFilter: 'quickFilter',
        onQueryChange: 'queryChange',
        onFilter: 'filter',
        onAction: 'action'
    } as PTableHeaderEvents,
    defineCustomElement: definePTableHeader
});

export type PTableRowEvents = NonNullable<unknown>;

export const PTableRow: StencilReactComponent<PTableRowElement, PTableRowEvents> = /*@__PURE__*/ createComponent<PTableRowElement, PTableRowEvents>({
    tagName: 'p-table-row',
    elementClass: PTableRowElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PTableRowEvents,
    defineCustomElement: definePTableRow
});

export type PTableRowActionEvents = NonNullable<unknown>;

export const PTableRowAction: StencilReactComponent<PTableRowActionElement, PTableRowActionEvents> = /*@__PURE__*/ createComponent<PTableRowActionElement, PTableRowActionEvents>({
    tagName: 'p-table-row-action',
    elementClass: PTableRowActionElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PTableRowActionEvents,
    defineCustomElement: definePTableRowAction
});

export type PToastEvents = { onAction: EventName<PToastCustomEvent<MouseEvent>> };

export const PToast: StencilReactComponent<PToastElement, PToastEvents> = /*@__PURE__*/ createComponent<PToastElement, PToastEvents>({
    tagName: 'p-toast',
    elementClass: PToastElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAction: 'action' } as PToastEvents,
    defineCustomElement: definePToast
});

export type PToastContainerEvents = NonNullable<unknown>;

export const PToastContainer: StencilReactComponent<PToastContainerElement, PToastContainerEvents> = /*@__PURE__*/ createComponent<PToastContainerElement, PToastContainerEvents>({
    tagName: 'p-toast-container',
    elementClass: PToastContainerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PToastContainerEvents,
    defineCustomElement: definePToastContainer
});

export type PToggleEvents = {
    onCheckedChange: EventName<CustomEvent<boolean>>,
    onIndeterminateChange: EventName<CustomEvent<boolean>>
};

export const PToggle: StencilReactComponent<PToggleElement, PToggleEvents> = /*@__PURE__*/ createComponent<PToggleElement, PToggleEvents>({
    tagName: 'p-toggle',
    elementClass: PToggleElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onCheckedChange: 'checkedChange',
        onIndeterminateChange: 'indeterminateChange'
    } as PToggleEvents,
    defineCustomElement: definePToggle
});

export type PTooltipEvents = { onIsOpen: EventName<CustomEvent<boolean>> };

export const PTooltip: StencilReactComponent<PTooltipElement, PTooltipEvents> = /*@__PURE__*/ createComponent<PTooltipElement, PTooltipEvents>({
    tagName: 'p-tooltip',
    elementClass: PTooltipElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onIsOpen: 'isOpen' } as PTooltipEvents,
    defineCustomElement: definePTooltip
});
