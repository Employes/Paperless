/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { IconFlipOptions, IconVariant } from "./components/atoms/icon/icon.component";
import { RotateOptions, TextSizeOptions } from "./types/tailwind";
import { Placement, PositioningStrategy } from "@popperjs/core";
import { IconFlipOptions as IconFlipOptions1, IconVariant as IconVariant1 } from "./components/atoms/icon/icon.component";
import { IllustrationVariant } from "./components/atoms/illustration/illustration.component";
import { Observable } from "rxjs";
import { templateFunc } from "./components/molecules/page-size-select/page-size-select.component";
import { QuickFilter } from "./types/table";
import { templateFunc as templateFunc1 } from "./components/molecules/page-size-select/page-size-select.component";
import { TableDefinitionSizes, templateFunc as templateFunc2 } from "./components/helpers/table-definition/table-definition.component";
import { buttonTemplateFunc, templateFunc as templateFunc3 } from "./components/molecules/table-header/table-header.component";
export namespace Components {
    interface PAccordion {
        /**
          * Wether the accordion can be closed
         */
        "closeable": boolean;
        /**
          * Header of the accordion
         */
        "header": string;
        /**
          * Wether the accordion is open
         */
        "open": boolean;
        /**
          * Wether the accordion can be opened
         */
        "openable": boolean;
    }
    interface PAvatar {
        /**
          * The default image to show on errors
         */
        "defaultImage": string;
        /**
          * The size of the avatar
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * The image used for the avatar
         */
        "src": string;
        /**
          * The variant of the avatar
         */
        "variant": 'user' | 'company';
    }
    interface PAvatarGroup {
        /**
          * The amount to show after the avatars
         */
        "extra": number;
    }
    interface PButton {
        /**
          * Wether to show a chevron or not
         */
        "chevron": boolean | 'up' | 'down';
        /**
          * Chevron position
         */
        "chevronPosition": 'start' | 'end';
        /**
          * Wether the button is disabled
         */
        "disabled": boolean;
        /**
          * Href in case of "text" version
         */
        "href": string;
        /**
          * Icon to show on the button
         */
        "icon": IconVariant;
        /**
          * Icon flip
         */
        "iconFlip": IconFlipOptions;
        /**
          * Wether the button is icon only
         */
        "iconOnly": boolean;
        /**
          * Icon position
         */
        "iconPosition": 'start' | 'end';
        /**
          * Icon rotate
         */
        "iconRotate": RotateOptions;
        /**
          * Wether the button should inherit text styles
         */
        "inheritText": boolean;
        /**
          * Wether to show a loader or not
         */
        "loading": boolean;
        /**
          * The size of the button
         */
        "size": 'small' | 'medium';
        /**
          * Target in case of "text" version
         */
        "target": string;
        /**
          * The variant of the button
         */
        "variant": 'primary' | 'secondary' | 'text';
        /**
          * The width of the button
         */
        "width": 'auto' | 'full';
    }
    interface PCardBody {
        /**
          * Wether the button should inherit text styles
         */
        "inheritText": boolean;
    }
    interface PCardContainer {
        /**
          * Wether the card should be hoverable
         */
        "hoverable": boolean;
        /**
          * Wether the card should have shadow
         */
        "shadow": boolean;
    }
    interface PCardHeader {
        /**
          * Enable the title arrow
         */
        "arrow": boolean;
        /**
          * Content of the card header
         */
        "header": string;
    }
    interface PContentSlider {
        /**
          * Wether to disable auto centering the content
         */
        "disableAutoCenter": boolean;
        /**
          * Wether to disable dragging the content
         */
        "disableDrag": boolean;
        /**
          * Wether to disable clicking the indicator scrolls content
         */
        "disableIndicatorClick": boolean;
        /**
          * Wether to hide the indicator on mobile
         */
        "hideMobileIndicator": boolean;
    }
    interface PCounter {
        /**
          * The size of the counter
         */
        "size": 'default' | 'mini';
        /**
          * The variant of the counter
         */
        "variant": 'info' | 'negative' | 'positive' | 'unbiased';
    }
    interface PDivider {
    }
    interface PDropdown {
        /**
          * Chevron direction
         */
        "chevronDirection": 'up' | 'down';
        /**
          * Chevron position
         */
        "chevronPosition": 'start' | 'end';
        /**
          * Wether to automatically close the dropdown menu after clicking inside
         */
        "disableTriggerClick": boolean;
        /**
          * Wether to automatically close the dropdown menu after clicking inside
         */
        "insideClick": boolean;
        /**
          * The content of the dropdown menu
         */
        "placement": Placement;
        /**
          * Wether to show the dropdown menu
         */
        "show": boolean;
        /**
          * The strategy of the popover placement
         */
        "strategy": PositioningStrategy;
    }
    interface PDropdownMenuContainer {
    }
    interface PDropdownMenuItem {
        /**
          * Wether the dropdown menu item is active
         */
        "active": boolean;
        /**
          * Icon of the navigation item
         */
        "icon": IconVariant;
    }
    interface PHelper {
        /**
          * The placement of the helper popover
         */
        "placement": Placement;
    }
    interface PIcon {
        /**
          * Wether to flip the icon horizontally or vertically
         */
        "flip": IconFlipOptions;
        /**
          * Wether to rotate the icon x degrees
         */
        "rotate": RotateOptions;
        /**
          * The size of the icon, using tailwind sizes
         */
        "size": TextSizeOptions;
        /**
          * The icon the be displayed
         */
        "variant": IconVariant;
    }
    interface PIllustration {
        /**
          * The icon the be displayed
         */
        "variant": IllustrationVariant;
    }
    interface PInfoPanel {
        /**
          * Wether the panel can be closed
         */
        "closeable": boolean;
        /**
          * The content of the info panel
         */
        "content": string;
        /**
          * The header of the info panel
         */
        "header": string;
        /**
          * The variant of the info panel
         */
        "variant": 'info' | 'negative' | 'positive' | 'unbiased';
    }
    interface PInputGroup {
        /**
          * Wether the input group is disabled
         */
        "disabled": boolean;
        /**
          * The helper of the input group
         */
        "error": string;
        /**
          * Wether the input group is focused
         */
        "focused": boolean;
        /**
          * The helper of the input group
         */
        "helper": string;
        /**
          * Icon of the navigation item
         */
        "icon": IconVariant;
        /**
          * Icon flip
         */
        "iconFlip": IconFlipOptions;
        /**
          * Icon rotate
         */
        "iconRotate": RotateOptions;
        /**
          * The label of the input group
         */
        "label": string;
        /**
          * The prefix of the input group
         */
        "prefix": string;
        /**
          * The size of the input group
         */
        "size": 'small' | 'medium';
        /**
          * The suffix of the input group
         */
        "suffix": string;
    }
    interface PLayout {
        /**
          * Variant of the layout
         */
        "variant": 'default' | 'login';
    }
    interface PLoader {
        /**
          * Color of the loader
         */
        "color": 'indigo' | 'white' | 'storm';
        /**
          * !NOT IMPLEMENTED! Modal description for modal variant
         */
        "modalDescription": string;
        /**
          * !NOT IMPLEMENTED! Modal title for modal variant
         */
        "modalTitle": string;
        /**
          * Wether to show or hide the loader
         */
        "show": boolean | Observable<boolean>;
        /**
          * Variant of loader
         */
        "variant": | 'inline'
        | 'full-width'
        | 'full-screen'
        | 'modal'
        | 'ghost';
    }
    interface PModal {
        /**
          * The Header of the modal
         */
        "header": string;
        /**
          * Wether to show the modal or not
         */
        "show": boolean;
        /**
          * Wether to show the close on mobile in the header
         */
        "showMobileClose": boolean;
        /**
          * Wether to show the footer on mobile
         */
        "showMobileFooter": boolean;
        /**
          * The size of the modal container
         */
        "size": 'sm' | 'md' | 'lg' | 'xl';
        /**
          * The variant of the modal body
         */
        "variant": 'default' | 'table';
    }
    interface PModalBackdrop {
    }
    interface PModalBody {
        /**
          * The variant of the modal body
         */
        "variant": 'default' | 'table';
    }
    interface PModalContainer {
        /**
          * The size of the modal container
         */
        "size": 'sm' | 'md' | 'lg' | 'xl';
    }
    interface PModalFooter {
        /**
          * Wether to show the footer on mobile
         */
        "hideOnMobile": boolean;
    }
    interface PModalHeader {
        /**
          * Wether to show the close button on mobile
         */
        "showMobileClose": boolean;
    }
    interface PNavbar {
        /**
          * The text to display for the close button
         */
        "closeText": string;
        /**
          * The text to display for the menu button & sidebar title
         */
        "menuText": string;
    }
    interface PNavigationItem {
        /**
          * Wether the navigation item is active
         */
        "active": boolean;
        /**
          * Icon of the navigation item
         */
        "counter": number | string;
        /**
          * The href of the navigation item
         */
        "href": string;
        /**
          * Icon of the navigation item
         */
        "icon": IconVariant;
        /**
          * The target of the navigation item
         */
        "target": string;
    }
    interface PPageSizeSelect {
        /**
          * The size of the button
         */
        "buttonSize": 'small' | 'medium';
        /**
          * The template for the data view
         */
        "buttonTemplate": templateFunc;
        /**
          * Chevron position
         */
        "chevronPosition": 'start' | 'end';
        /**
          * Wether to hide when there is only 1 page available
         */
        "hidden": boolean;
        /**
          * The template for the data view
         */
        "itemTemplate": templateFunc;
        /**
          * The current page
         */
        "size": number;
        /**
          * The available sizes
         */
        "sizeOptions": number[];
    }
    interface PPagination {
        /**
          * Wether to hide when there is only 1 page available
         */
        "hideOnSinglePage": boolean;
        /**
          * The current page
         */
        "page": number;
        /**
          * The amount of items per page
         */
        "pageSize": number;
        /**
          * The total amount of items
         */
        "total": number;
    }
    interface PPaginationItem {
        /**
          * Wether the pagination item is active
         */
        "active": boolean;
    }
    interface PProfile {
        /**
          * The size of the profile avatar
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * The variant of the profile
         */
        "variant": 'company' | 'user';
    }
    interface PSegmentContainer {
    }
    interface PSegmentItem {
        /**
          * Wether the segment item is active
         */
        "active": boolean;
        /**
          * Icon to show on the segment item
         */
        "icon": IconVariant;
        /**
          * Icon flip
         */
        "iconFlip": IconFlipOptions;
        /**
          * Icon rotate
         */
        "iconRotate": RotateOptions;
    }
    interface PSliderIndicator {
        /**
          * Wether the slider indicator is active
         */
        "active": boolean;
    }
    interface PStatus {
        /**
          * Icon to show on the status
         */
        "icon": IconVariant;
        /**
          * Icon flip
         */
        "iconFlip": IconFlipOptions;
        /**
          * Icon rotate
         */
        "iconRotate": RotateOptions;
        /**
          * The variant of the status
         */
        "variant": 'default' | 'positive' | 'unbiased' | 'negative';
    }
    interface PStepper {
        /**
          * The currently active step
         */
        "activeStep": number;
        /**
          * The direction of the stepper
         */
        "direction": 'horizontal' | 'vertical';
    }
    interface PStepperItem {
        /**
          * Wether the step is active
         */
        "active": boolean;
        /**
          * The alignment of the step content
         */
        "align": 'start' | 'center' | 'end';
        /**
          * The direction of the stepper step
         */
        "direction": 'horizontal' | 'vertical';
        /**
          * Wether the step is finished
         */
        "finished": boolean;
    }
    interface PStepperLine {
        /**
          * Wether the line is active
         */
        "active": boolean;
        /**
          * The direction of the stepper line
         */
        "direction": 'horizontal' | 'vertical';
    }
    interface PTabGroup {
    }
    interface PTabItem {
        /**
          * Wether the tab item is active
         */
        "active": boolean;
    }
    interface PTable {
        /**
          * Active quick filter identifier
         */
        "activeQuickFilterIdentifier": string;
        /**
          * A key to determine if a row can be selected
         */
        "canSelectKey": string;
        /**
          * The template for the edit button text
         */
        "editButtonTemplate": templateFunc1;
        /**
          * Wether to show the edit button
         */
        "enableEdit": boolean;
        /**
          * Wether to enable export
         */
        "enableExport": boolean;
        /**
          * Wether to show the filter button
         */
        "enableFilter": boolean;
        /**
          * Wether to enable page size select
         */
        "enablePageSize": boolean;
        /**
          * Wether to enable pagination
         */
        "enablePagination": boolean;
        /**
          * Wether to enable selection
         */
        "enableRowSelection": boolean;
        /**
          * Wether to show the search input
         */
        "enableSearch": boolean;
        /**
          * The template for the filter button text
         */
        "filterButtonTemplate": templateFunc1;
        /**
          * The items to be fed to the table
         */
        "items": string;
        /**
          * The current page
         */
        "page": number;
        /**
          * The amount of items per page
         */
        "pageSize": number;
        /**
          * The options for the page size
         */
        "pageSizeOptions": number[];
        /**
          * The query to show in the search bar
         */
        "query": string;
        /**
          * Quick filters to show
         */
        "quickFilters": QuickFilter[];
        /**
          * The amount of filters being selected
         */
        "selectedFiltersAmount": number;
        /**
          * The current selection of items
         */
        "selectedRows": any[];
        /**
          * The key to determine if a row is selected
         */
        "selectionKey": string;
        /**
          * The total amount of items
         */
        "total": number;
    }
    interface PTableBody {
    }
    interface PTableContainer {
    }
    interface PTableDefinition {
        /**
          * The alignment of the column
         */
        "align": 'start' | 'center' | 'end';
        /**
          * The name of the column
         */
        "name": string;
        /**
          * The path of the value of the item you want to display
         */
        "path": string;
        /**
          * The sizes of the column
         */
        "sizes": 'auto' | number | TableDefinitionSizes;
        /**
          * The template for the data view
         */
        "template": templateFunc;
        /**
          * The type of the column
         */
        "type": 'td' | 'th';
    }
    interface PTableFooter {
        /**
          * Wether to enable export
         */
        "enableExport": boolean;
        /**
          * Wether to enable page size select
         */
        "enablePageSize": boolean;
        /**
          * Wether to enable pagination
         */
        "enablePagination": boolean;
        /**
          * The current page
         */
        "page": number;
        /**
          * The amount of items per page
         */
        "pageSize": number;
        /**
          * The options for the page size
         */
        "pageSizeOptions": number[];
        /**
          * The total amount of items
         */
        "total": number;
    }
    interface PTableHeader {
        /**
          * Active quick filter identifier
         */
        "activeQuickFilterIdentifier": string;
        /**
          * Wether to enable the edit button
         */
        "canEdit": boolean;
        /**
          * The template for the edit button text
         */
        "editButtonTemplate": buttonTemplateFunc;
        /**
          * Wether to show the edit button
         */
        "enableEdit": boolean;
        /**
          * Wether to show the filter button
         */
        "enableFilter": boolean;
        /**
          * Wether to show the search input
         */
        "enableSearch": boolean;
        /**
          * The template for the filter button text
         */
        "filterButtonTemplate": templateFunc;
        /**
          * The amount of items that are selected
         */
        "itemsSelectedAmount": number;
        /**
          * The query to show in the search bar
         */
        "query": string;
        /**
          * Quick filters to show
         */
        "quickFilters": QuickFilter[];
        /**
          * The amount of filters being selected
         */
        "selectedFiltersAmount": number;
    }
    interface PTableRow {
        /**
          * Enable hover
         */
        "enableHover": boolean;
        /**
          * Variant of the header
         */
        "variant": 'default' | 'header';
    }
    interface PTag {
        /**
          * Wether to add the circle or not
         */
        "circle": boolean;
        /**
          * Variant of the tag
         */
        "variant": | 'positive'
        | 'unbiased'
        | 'negative'
        | 'info';
    }
    interface PTooltip {
        /**
          * Wether to someone can manually close the popover
         */
        "canManuallyClose": boolean;
        /**
          * The placement of the popover
         */
        "placement": Placement;
        /**
          * The content of the popover
         */
        "popover": any;
        /**
          * Wether to show the popover
         */
        "show": boolean;
        /**
          * The strategy of the popover placement
         */
        "strategy": PositioningStrategy;
        /**
          * The variant of the popover
         */
        "variant": 'hover' | 'click' | 'error';
    }
}
export interface PAccordionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPAccordionElement;
}
export interface PButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPButtonElement;
}
export interface PDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPDropdownElement;
}
export interface PModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPModalElement;
}
export interface PModalHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPModalHeaderElement;
}
export interface PPageSizeSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPPageSizeSelectElement;
}
export interface PPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPPaginationElement;
}
export interface PTableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPTableElement;
}
export interface PTableDefinitionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPTableDefinitionElement;
}
export interface PTableFooterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPTableFooterElement;
}
export interface PTableHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPTableHeaderElement;
}
export interface PTooltipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPTooltipElement;
}
declare global {
    interface HTMLPAccordionElement extends Components.PAccordion, HTMLStencilElement {
    }
    var HTMLPAccordionElement: {
        prototype: HTMLPAccordionElement;
        new (): HTMLPAccordionElement;
    };
    interface HTMLPAvatarElement extends Components.PAvatar, HTMLStencilElement {
    }
    var HTMLPAvatarElement: {
        prototype: HTMLPAvatarElement;
        new (): HTMLPAvatarElement;
    };
    interface HTMLPAvatarGroupElement extends Components.PAvatarGroup, HTMLStencilElement {
    }
    var HTMLPAvatarGroupElement: {
        prototype: HTMLPAvatarGroupElement;
        new (): HTMLPAvatarGroupElement;
    };
    interface HTMLPButtonElement extends Components.PButton, HTMLStencilElement {
    }
    var HTMLPButtonElement: {
        prototype: HTMLPButtonElement;
        new (): HTMLPButtonElement;
    };
    interface HTMLPCardBodyElement extends Components.PCardBody, HTMLStencilElement {
    }
    var HTMLPCardBodyElement: {
        prototype: HTMLPCardBodyElement;
        new (): HTMLPCardBodyElement;
    };
    interface HTMLPCardContainerElement extends Components.PCardContainer, HTMLStencilElement {
    }
    var HTMLPCardContainerElement: {
        prototype: HTMLPCardContainerElement;
        new (): HTMLPCardContainerElement;
    };
    interface HTMLPCardHeaderElement extends Components.PCardHeader, HTMLStencilElement {
    }
    var HTMLPCardHeaderElement: {
        prototype: HTMLPCardHeaderElement;
        new (): HTMLPCardHeaderElement;
    };
    interface HTMLPContentSliderElement extends Components.PContentSlider, HTMLStencilElement {
    }
    var HTMLPContentSliderElement: {
        prototype: HTMLPContentSliderElement;
        new (): HTMLPContentSliderElement;
    };
    interface HTMLPCounterElement extends Components.PCounter, HTMLStencilElement {
    }
    var HTMLPCounterElement: {
        prototype: HTMLPCounterElement;
        new (): HTMLPCounterElement;
    };
    interface HTMLPDividerElement extends Components.PDivider, HTMLStencilElement {
    }
    var HTMLPDividerElement: {
        prototype: HTMLPDividerElement;
        new (): HTMLPDividerElement;
    };
    interface HTMLPDropdownElement extends Components.PDropdown, HTMLStencilElement {
    }
    var HTMLPDropdownElement: {
        prototype: HTMLPDropdownElement;
        new (): HTMLPDropdownElement;
    };
    interface HTMLPDropdownMenuContainerElement extends Components.PDropdownMenuContainer, HTMLStencilElement {
    }
    var HTMLPDropdownMenuContainerElement: {
        prototype: HTMLPDropdownMenuContainerElement;
        new (): HTMLPDropdownMenuContainerElement;
    };
    interface HTMLPDropdownMenuItemElement extends Components.PDropdownMenuItem, HTMLStencilElement {
    }
    var HTMLPDropdownMenuItemElement: {
        prototype: HTMLPDropdownMenuItemElement;
        new (): HTMLPDropdownMenuItemElement;
    };
    interface HTMLPHelperElement extends Components.PHelper, HTMLStencilElement {
    }
    var HTMLPHelperElement: {
        prototype: HTMLPHelperElement;
        new (): HTMLPHelperElement;
    };
    interface HTMLPIconElement extends Components.PIcon, HTMLStencilElement {
    }
    var HTMLPIconElement: {
        prototype: HTMLPIconElement;
        new (): HTMLPIconElement;
    };
    interface HTMLPIllustrationElement extends Components.PIllustration, HTMLStencilElement {
    }
    var HTMLPIllustrationElement: {
        prototype: HTMLPIllustrationElement;
        new (): HTMLPIllustrationElement;
    };
    interface HTMLPInfoPanelElement extends Components.PInfoPanel, HTMLStencilElement {
    }
    var HTMLPInfoPanelElement: {
        prototype: HTMLPInfoPanelElement;
        new (): HTMLPInfoPanelElement;
    };
    interface HTMLPInputGroupElement extends Components.PInputGroup, HTMLStencilElement {
    }
    var HTMLPInputGroupElement: {
        prototype: HTMLPInputGroupElement;
        new (): HTMLPInputGroupElement;
    };
    interface HTMLPLayoutElement extends Components.PLayout, HTMLStencilElement {
    }
    var HTMLPLayoutElement: {
        prototype: HTMLPLayoutElement;
        new (): HTMLPLayoutElement;
    };
    interface HTMLPLoaderElement extends Components.PLoader, HTMLStencilElement {
    }
    var HTMLPLoaderElement: {
        prototype: HTMLPLoaderElement;
        new (): HTMLPLoaderElement;
    };
    interface HTMLPModalElement extends Components.PModal, HTMLStencilElement {
    }
    var HTMLPModalElement: {
        prototype: HTMLPModalElement;
        new (): HTMLPModalElement;
    };
    interface HTMLPModalBackdropElement extends Components.PModalBackdrop, HTMLStencilElement {
    }
    var HTMLPModalBackdropElement: {
        prototype: HTMLPModalBackdropElement;
        new (): HTMLPModalBackdropElement;
    };
    interface HTMLPModalBodyElement extends Components.PModalBody, HTMLStencilElement {
    }
    var HTMLPModalBodyElement: {
        prototype: HTMLPModalBodyElement;
        new (): HTMLPModalBodyElement;
    };
    interface HTMLPModalContainerElement extends Components.PModalContainer, HTMLStencilElement {
    }
    var HTMLPModalContainerElement: {
        prototype: HTMLPModalContainerElement;
        new (): HTMLPModalContainerElement;
    };
    interface HTMLPModalFooterElement extends Components.PModalFooter, HTMLStencilElement {
    }
    var HTMLPModalFooterElement: {
        prototype: HTMLPModalFooterElement;
        new (): HTMLPModalFooterElement;
    };
    interface HTMLPModalHeaderElement extends Components.PModalHeader, HTMLStencilElement {
    }
    var HTMLPModalHeaderElement: {
        prototype: HTMLPModalHeaderElement;
        new (): HTMLPModalHeaderElement;
    };
    interface HTMLPNavbarElement extends Components.PNavbar, HTMLStencilElement {
    }
    var HTMLPNavbarElement: {
        prototype: HTMLPNavbarElement;
        new (): HTMLPNavbarElement;
    };
    interface HTMLPNavigationItemElement extends Components.PNavigationItem, HTMLStencilElement {
    }
    var HTMLPNavigationItemElement: {
        prototype: HTMLPNavigationItemElement;
        new (): HTMLPNavigationItemElement;
    };
    interface HTMLPPageSizeSelectElement extends Components.PPageSizeSelect, HTMLStencilElement {
    }
    var HTMLPPageSizeSelectElement: {
        prototype: HTMLPPageSizeSelectElement;
        new (): HTMLPPageSizeSelectElement;
    };
    interface HTMLPPaginationElement extends Components.PPagination, HTMLStencilElement {
    }
    var HTMLPPaginationElement: {
        prototype: HTMLPPaginationElement;
        new (): HTMLPPaginationElement;
    };
    interface HTMLPPaginationItemElement extends Components.PPaginationItem, HTMLStencilElement {
    }
    var HTMLPPaginationItemElement: {
        prototype: HTMLPPaginationItemElement;
        new (): HTMLPPaginationItemElement;
    };
    interface HTMLPProfileElement extends Components.PProfile, HTMLStencilElement {
    }
    var HTMLPProfileElement: {
        prototype: HTMLPProfileElement;
        new (): HTMLPProfileElement;
    };
    interface HTMLPSegmentContainerElement extends Components.PSegmentContainer, HTMLStencilElement {
    }
    var HTMLPSegmentContainerElement: {
        prototype: HTMLPSegmentContainerElement;
        new (): HTMLPSegmentContainerElement;
    };
    interface HTMLPSegmentItemElement extends Components.PSegmentItem, HTMLStencilElement {
    }
    var HTMLPSegmentItemElement: {
        prototype: HTMLPSegmentItemElement;
        new (): HTMLPSegmentItemElement;
    };
    interface HTMLPSliderIndicatorElement extends Components.PSliderIndicator, HTMLStencilElement {
    }
    var HTMLPSliderIndicatorElement: {
        prototype: HTMLPSliderIndicatorElement;
        new (): HTMLPSliderIndicatorElement;
    };
    interface HTMLPStatusElement extends Components.PStatus, HTMLStencilElement {
    }
    var HTMLPStatusElement: {
        prototype: HTMLPStatusElement;
        new (): HTMLPStatusElement;
    };
    interface HTMLPStepperElement extends Components.PStepper, HTMLStencilElement {
    }
    var HTMLPStepperElement: {
        prototype: HTMLPStepperElement;
        new (): HTMLPStepperElement;
    };
    interface HTMLPStepperItemElement extends Components.PStepperItem, HTMLStencilElement {
    }
    var HTMLPStepperItemElement: {
        prototype: HTMLPStepperItemElement;
        new (): HTMLPStepperItemElement;
    };
    interface HTMLPStepperLineElement extends Components.PStepperLine, HTMLStencilElement {
    }
    var HTMLPStepperLineElement: {
        prototype: HTMLPStepperLineElement;
        new (): HTMLPStepperLineElement;
    };
    interface HTMLPTabGroupElement extends Components.PTabGroup, HTMLStencilElement {
    }
    var HTMLPTabGroupElement: {
        prototype: HTMLPTabGroupElement;
        new (): HTMLPTabGroupElement;
    };
    interface HTMLPTabItemElement extends Components.PTabItem, HTMLStencilElement {
    }
    var HTMLPTabItemElement: {
        prototype: HTMLPTabItemElement;
        new (): HTMLPTabItemElement;
    };
    interface HTMLPTableElement extends Components.PTable, HTMLStencilElement {
    }
    var HTMLPTableElement: {
        prototype: HTMLPTableElement;
        new (): HTMLPTableElement;
    };
    interface HTMLPTableBodyElement extends Components.PTableBody, HTMLStencilElement {
    }
    var HTMLPTableBodyElement: {
        prototype: HTMLPTableBodyElement;
        new (): HTMLPTableBodyElement;
    };
    interface HTMLPTableContainerElement extends Components.PTableContainer, HTMLStencilElement {
    }
    var HTMLPTableContainerElement: {
        prototype: HTMLPTableContainerElement;
        new (): HTMLPTableContainerElement;
    };
    interface HTMLPTableDefinitionElement extends Components.PTableDefinition, HTMLStencilElement {
    }
    var HTMLPTableDefinitionElement: {
        prototype: HTMLPTableDefinitionElement;
        new (): HTMLPTableDefinitionElement;
    };
    interface HTMLPTableFooterElement extends Components.PTableFooter, HTMLStencilElement {
    }
    var HTMLPTableFooterElement: {
        prototype: HTMLPTableFooterElement;
        new (): HTMLPTableFooterElement;
    };
    interface HTMLPTableHeaderElement extends Components.PTableHeader, HTMLStencilElement {
    }
    var HTMLPTableHeaderElement: {
        prototype: HTMLPTableHeaderElement;
        new (): HTMLPTableHeaderElement;
    };
    interface HTMLPTableRowElement extends Components.PTableRow, HTMLStencilElement {
    }
    var HTMLPTableRowElement: {
        prototype: HTMLPTableRowElement;
        new (): HTMLPTableRowElement;
    };
    interface HTMLPTagElement extends Components.PTag, HTMLStencilElement {
    }
    var HTMLPTagElement: {
        prototype: HTMLPTagElement;
        new (): HTMLPTagElement;
    };
    interface HTMLPTooltipElement extends Components.PTooltip, HTMLStencilElement {
    }
    var HTMLPTooltipElement: {
        prototype: HTMLPTooltipElement;
        new (): HTMLPTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "p-accordion": HTMLPAccordionElement;
        "p-avatar": HTMLPAvatarElement;
        "p-avatar-group": HTMLPAvatarGroupElement;
        "p-button": HTMLPButtonElement;
        "p-card-body": HTMLPCardBodyElement;
        "p-card-container": HTMLPCardContainerElement;
        "p-card-header": HTMLPCardHeaderElement;
        "p-content-slider": HTMLPContentSliderElement;
        "p-counter": HTMLPCounterElement;
        "p-divider": HTMLPDividerElement;
        "p-dropdown": HTMLPDropdownElement;
        "p-dropdown-menu-container": HTMLPDropdownMenuContainerElement;
        "p-dropdown-menu-item": HTMLPDropdownMenuItemElement;
        "p-helper": HTMLPHelperElement;
        "p-icon": HTMLPIconElement;
        "p-illustration": HTMLPIllustrationElement;
        "p-info-panel": HTMLPInfoPanelElement;
        "p-input-group": HTMLPInputGroupElement;
        "p-layout": HTMLPLayoutElement;
        "p-loader": HTMLPLoaderElement;
        "p-modal": HTMLPModalElement;
        "p-modal-backdrop": HTMLPModalBackdropElement;
        "p-modal-body": HTMLPModalBodyElement;
        "p-modal-container": HTMLPModalContainerElement;
        "p-modal-footer": HTMLPModalFooterElement;
        "p-modal-header": HTMLPModalHeaderElement;
        "p-navbar": HTMLPNavbarElement;
        "p-navigation-item": HTMLPNavigationItemElement;
        "p-page-size-select": HTMLPPageSizeSelectElement;
        "p-pagination": HTMLPPaginationElement;
        "p-pagination-item": HTMLPPaginationItemElement;
        "p-profile": HTMLPProfileElement;
        "p-segment-container": HTMLPSegmentContainerElement;
        "p-segment-item": HTMLPSegmentItemElement;
        "p-slider-indicator": HTMLPSliderIndicatorElement;
        "p-status": HTMLPStatusElement;
        "p-stepper": HTMLPStepperElement;
        "p-stepper-item": HTMLPStepperItemElement;
        "p-stepper-line": HTMLPStepperLineElement;
        "p-tab-group": HTMLPTabGroupElement;
        "p-tab-item": HTMLPTabItemElement;
        "p-table": HTMLPTableElement;
        "p-table-body": HTMLPTableBodyElement;
        "p-table-container": HTMLPTableContainerElement;
        "p-table-definition": HTMLPTableDefinitionElement;
        "p-table-footer": HTMLPTableFooterElement;
        "p-table-header": HTMLPTableHeaderElement;
        "p-table-row": HTMLPTableRowElement;
        "p-tag": HTMLPTagElement;
        "p-tooltip": HTMLPTooltipElement;
    }
}
declare namespace LocalJSX {
    interface PAccordion {
        /**
          * Wether the accordion can be closed
         */
        "closeable"?: boolean;
        /**
          * Header of the accordion
         */
        "header": string;
        /**
          * Open change event
         */
        "onIsOpen"?: (event: PAccordionCustomEvent<boolean>) => void;
        /**
          * Wether the accordion is open
         */
        "open"?: boolean;
        /**
          * Wether the accordion can be opened
         */
        "openable"?: boolean;
    }
    interface PAvatar {
        /**
          * The default image to show on errors
         */
        "defaultImage"?: string;
        /**
          * The size of the avatar
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The image used for the avatar
         */
        "src": string;
        /**
          * The variant of the avatar
         */
        "variant"?: 'user' | 'company';
    }
    interface PAvatarGroup {
        /**
          * The amount to show after the avatars
         */
        "extra"?: number;
    }
    interface PButton {
        /**
          * Wether to show a chevron or not
         */
        "chevron"?: boolean | 'up' | 'down';
        /**
          * Chevron position
         */
        "chevronPosition"?: 'start' | 'end';
        /**
          * Wether the button is disabled
         */
        "disabled"?: boolean;
        /**
          * Href in case of "text" version
         */
        "href"?: string;
        /**
          * Icon to show on the button
         */
        "icon"?: IconVariant;
        /**
          * Icon flip
         */
        "iconFlip"?: IconFlipOptions;
        /**
          * Wether the button is icon only
         */
        "iconOnly"?: boolean;
        /**
          * Icon position
         */
        "iconPosition"?: 'start' | 'end';
        /**
          * Icon rotate
         */
        "iconRotate"?: RotateOptions;
        /**
          * Wether the button should inherit text styles
         */
        "inheritText"?: boolean;
        /**
          * Wether to show a loader or not
         */
        "loading"?: boolean;
        /**
          * Button click event
         */
        "onOnClick"?: (event: PButtonCustomEvent<MouseEvent>) => void;
        /**
          * The size of the button
         */
        "size"?: 'small' | 'medium';
        /**
          * Target in case of "text" version
         */
        "target"?: string;
        /**
          * The variant of the button
         */
        "variant"?: 'primary' | 'secondary' | 'text';
        /**
          * The width of the button
         */
        "width"?: 'auto' | 'full';
    }
    interface PCardBody {
        /**
          * Wether the button should inherit text styles
         */
        "inheritText"?: boolean;
    }
    interface PCardContainer {
        /**
          * Wether the card should be hoverable
         */
        "hoverable"?: boolean;
        /**
          * Wether the card should have shadow
         */
        "shadow"?: boolean;
    }
    interface PCardHeader {
        /**
          * Enable the title arrow
         */
        "arrow"?: boolean;
        /**
          * Content of the card header
         */
        "header"?: string;
    }
    interface PContentSlider {
        /**
          * Wether to disable auto centering the content
         */
        "disableAutoCenter"?: boolean;
        /**
          * Wether to disable dragging the content
         */
        "disableDrag"?: boolean;
        /**
          * Wether to disable clicking the indicator scrolls content
         */
        "disableIndicatorClick"?: boolean;
        /**
          * Wether to hide the indicator on mobile
         */
        "hideMobileIndicator"?: boolean;
    }
    interface PCounter {
        /**
          * The size of the counter
         */
        "size"?: 'default' | 'mini';
        /**
          * The variant of the counter
         */
        "variant"?: 'info' | 'negative' | 'positive' | 'unbiased';
    }
    interface PDivider {
    }
    interface PDropdown {
        /**
          * Chevron direction
         */
        "chevronDirection"?: 'up' | 'down';
        /**
          * Chevron position
         */
        "chevronPosition"?: 'start' | 'end';
        /**
          * Wether to automatically close the dropdown menu after clicking inside
         */
        "disableTriggerClick"?: boolean;
        /**
          * Wether to automatically close the dropdown menu after clicking inside
         */
        "insideClick"?: boolean;
        /**
          * Open change event
         */
        "onIsOpen"?: (event: PDropdownCustomEvent<boolean>) => void;
        /**
          * The content of the dropdown menu
         */
        "placement"?: Placement;
        /**
          * Wether to show the dropdown menu
         */
        "show"?: boolean;
        /**
          * The strategy of the popover placement
         */
        "strategy"?: PositioningStrategy;
    }
    interface PDropdownMenuContainer {
    }
    interface PDropdownMenuItem {
        /**
          * Wether the dropdown menu item is active
         */
        "active"?: boolean;
        /**
          * Icon of the navigation item
         */
        "icon"?: IconVariant;
    }
    interface PHelper {
        /**
          * The placement of the helper popover
         */
        "placement"?: Placement;
    }
    interface PIcon {
        /**
          * Wether to flip the icon horizontally or vertically
         */
        "flip"?: IconFlipOptions;
        /**
          * Wether to rotate the icon x degrees
         */
        "rotate"?: RotateOptions;
        /**
          * The size of the icon, using tailwind sizes
         */
        "size"?: TextSizeOptions;
        /**
          * The icon the be displayed
         */
        "variant": IconVariant;
    }
    interface PIllustration {
        /**
          * The icon the be displayed
         */
        "variant": IllustrationVariant;
    }
    interface PInfoPanel {
        /**
          * Wether the panel can be closed
         */
        "closeable"?: boolean;
        /**
          * The content of the info panel
         */
        "content"?: string;
        /**
          * The header of the info panel
         */
        "header"?: string;
        /**
          * The variant of the info panel
         */
        "variant"?: 'info' | 'negative' | 'positive' | 'unbiased';
    }
    interface PInputGroup {
        /**
          * Wether the input group is disabled
         */
        "disabled"?: boolean;
        /**
          * The helper of the input group
         */
        "error"?: string;
        /**
          * Wether the input group is focused
         */
        "focused"?: boolean;
        /**
          * The helper of the input group
         */
        "helper"?: string;
        /**
          * Icon of the navigation item
         */
        "icon"?: IconVariant;
        /**
          * Icon flip
         */
        "iconFlip"?: IconFlipOptions;
        /**
          * Icon rotate
         */
        "iconRotate"?: RotateOptions;
        /**
          * The label of the input group
         */
        "label"?: string;
        /**
          * The prefix of the input group
         */
        "prefix"?: string;
        /**
          * The size of the input group
         */
        "size"?: 'small' | 'medium';
        /**
          * The suffix of the input group
         */
        "suffix"?: string;
    }
    interface PLayout {
        /**
          * Variant of the layout
         */
        "variant"?: 'default' | 'login';
    }
    interface PLoader {
        /**
          * Color of the loader
         */
        "color"?: 'indigo' | 'white' | 'storm';
        /**
          * !NOT IMPLEMENTED! Modal description for modal variant
         */
        "modalDescription"?: string;
        /**
          * !NOT IMPLEMENTED! Modal title for modal variant
         */
        "modalTitle"?: string;
        /**
          * Wether to show or hide the loader
         */
        "show"?: boolean | Observable<boolean>;
        /**
          * Variant of loader
         */
        "variant"?: | 'inline'
        | 'full-width'
        | 'full-screen'
        | 'modal'
        | 'ghost';
    }
    interface PModal {
        /**
          * The Header of the modal
         */
        "header"?: string;
        /**
          * Close click event
         */
        "onClose"?: (event: PModalCustomEvent<MouseEvent>) => void;
        /**
          * Wether to show the modal or not
         */
        "show"?: boolean;
        /**
          * Wether to show the close on mobile in the header
         */
        "showMobileClose"?: boolean;
        /**
          * Wether to show the footer on mobile
         */
        "showMobileFooter"?: boolean;
        /**
          * The size of the modal container
         */
        "size"?: 'sm' | 'md' | 'lg' | 'xl';
        /**
          * The variant of the modal body
         */
        "variant"?: 'default' | 'table';
    }
    interface PModalBackdrop {
    }
    interface PModalBody {
        /**
          * The variant of the modal body
         */
        "variant"?: 'default' | 'table';
    }
    interface PModalContainer {
        /**
          * The size of the modal container
         */
        "size"?: 'sm' | 'md' | 'lg' | 'xl';
    }
    interface PModalFooter {
        /**
          * Wether to show the footer on mobile
         */
        "hideOnMobile"?: boolean;
    }
    interface PModalHeader {
        /**
          * Close click event
         */
        "onClose"?: (event: PModalHeaderCustomEvent<MouseEvent>) => void;
        /**
          * Wether to show the close button on mobile
         */
        "showMobileClose"?: boolean;
    }
    interface PNavbar {
        /**
          * The text to display for the close button
         */
        "closeText"?: string;
        /**
          * The text to display for the menu button & sidebar title
         */
        "menuText"?: string;
    }
    interface PNavigationItem {
        /**
          * Wether the navigation item is active
         */
        "active"?: boolean;
        /**
          * Icon of the navigation item
         */
        "counter"?: number | string;
        /**
          * The href of the navigation item
         */
        "href"?: string;
        /**
          * Icon of the navigation item
         */
        "icon"?: IconVariant;
        /**
          * The target of the navigation item
         */
        "target"?: string;
    }
    interface PPageSizeSelect {
        /**
          * The size of the button
         */
        "buttonSize"?: 'small' | 'medium';
        /**
          * The template for the data view
         */
        "buttonTemplate"?: templateFunc;
        /**
          * Chevron position
         */
        "chevronPosition"?: 'start' | 'end';
        /**
          * Wether to hide when there is only 1 page available
         */
        "hidden"?: boolean;
        /**
          * The template for the data view
         */
        "itemTemplate"?: templateFunc;
        /**
          * Event whenever the size changes
         */
        "onSizeChange"?: (event: PPageSizeSelectCustomEvent<number>) => void;
        /**
          * The current page
         */
        "size"?: number;
        /**
          * The available sizes
         */
        "sizeOptions"?: number[];
    }
    interface PPagination {
        /**
          * Wether to hide when there is only 1 page available
         */
        "hideOnSinglePage"?: boolean;
        /**
          * Event whenever the page changes
         */
        "onPageChange"?: (event: PPaginationCustomEvent<number>) => void;
        /**
          * The current page
         */
        "page"?: number;
        /**
          * The amount of items per page
         */
        "pageSize"?: number;
        /**
          * The total amount of items
         */
        "total": number;
    }
    interface PPaginationItem {
        /**
          * Wether the pagination item is active
         */
        "active"?: boolean;
    }
    interface PProfile {
        /**
          * The size of the profile avatar
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The variant of the profile
         */
        "variant"?: 'company' | 'user';
    }
    interface PSegmentContainer {
    }
    interface PSegmentItem {
        /**
          * Wether the segment item is active
         */
        "active"?: boolean;
        /**
          * Icon to show on the segment item
         */
        "icon"?: IconVariant;
        /**
          * Icon flip
         */
        "iconFlip"?: IconFlipOptions;
        /**
          * Icon rotate
         */
        "iconRotate"?: RotateOptions;
    }
    interface PSliderIndicator {
        /**
          * Wether the slider indicator is active
         */
        "active"?: boolean;
    }
    interface PStatus {
        /**
          * Icon to show on the status
         */
        "icon"?: IconVariant;
        /**
          * Icon flip
         */
        "iconFlip"?: IconFlipOptions;
        /**
          * Icon rotate
         */
        "iconRotate"?: RotateOptions;
        /**
          * The variant of the status
         */
        "variant"?: 'default' | 'positive' | 'unbiased' | 'negative';
    }
    interface PStepper {
        /**
          * The currently active step
         */
        "activeStep"?: number;
        /**
          * The direction of the stepper
         */
        "direction"?: 'horizontal' | 'vertical';
    }
    interface PStepperItem {
        /**
          * Wether the step is active
         */
        "active"?: boolean;
        /**
          * The alignment of the step content
         */
        "align"?: 'start' | 'center' | 'end';
        /**
          * The direction of the stepper step
         */
        "direction"?: 'horizontal' | 'vertical';
        /**
          * Wether the step is finished
         */
        "finished"?: boolean;
    }
    interface PStepperLine {
        /**
          * Wether the line is active
         */
        "active"?: boolean;
        /**
          * The direction of the stepper line
         */
        "direction"?: 'horizontal' | 'vertical';
    }
    interface PTabGroup {
    }
    interface PTabItem {
        /**
          * Wether the tab item is active
         */
        "active"?: boolean;
    }
    interface PTable {
        /**
          * Active quick filter identifier
         */
        "activeQuickFilterIdentifier"?: string;
        /**
          * A key to determine if a row can be selected
         */
        "canSelectKey"?: string;
        /**
          * The template for the edit button text
         */
        "editButtonTemplate"?: templateFunc1;
        /**
          * Wether to show the edit button
         */
        "enableEdit"?: boolean;
        /**
          * Wether to enable export
         */
        "enableExport"?: boolean;
        /**
          * Wether to show the filter button
         */
        "enableFilter"?: boolean;
        /**
          * Wether to enable page size select
         */
        "enablePageSize"?: boolean;
        /**
          * Wether to enable pagination
         */
        "enablePagination"?: boolean;
        /**
          * Wether to enable selection
         */
        "enableRowSelection"?: boolean;
        /**
          * Wether to show the search input
         */
        "enableSearch"?: boolean;
        /**
          * The template for the filter button text
         */
        "filterButtonTemplate"?: templateFunc1;
        /**
          * The items to be fed to the table
         */
        "items"?: string;
        /**
          * Event when the edit button is clicked
         */
        "onEdit"?: (event: PTableCustomEvent<null>) => void;
        /**
          * Event whenever the page changes
         */
        "onExport"?: (event: PTableCustomEvent<number>) => void;
        /**
          * Event when the filter button is clicked
         */
        "onFilter"?: (event: PTableCustomEvent<null>) => void;
        /**
          * Event whenever the page changes
         */
        "onPageChange"?: (event: PTableCustomEvent<number>) => void;
        /**
          * Event whenever the page changes
         */
        "onPageSizeChange"?: (event: PTableCustomEvent<number>) => void;
        /**
          * Event when the query changes
         */
        "onQueryChange"?: (event: PTableCustomEvent<string>) => void;
        /**
          * Event when one of the quick filters is clicked
         */
        "onQuickFilter"?: (event: PTableCustomEvent<QuickFilter>) => void;
        /**
          * Event whenever a row is clicked
         */
        "onRowClick"?: (event: PTableCustomEvent<any>) => void;
        /**
          * Event whenever a row is deselected
         */
        "onRowDeselected"?: (event: PTableCustomEvent<any>) => void;
        /**
          * Event whenever a row is selected
         */
        "onRowSelected"?: (event: PTableCustomEvent<any>) => void;
        /**
          * Event whenever the current selection changes
         */
        "onSelectedRowsChange"?: (event: PTableCustomEvent<any>) => void;
        /**
          * The current page
         */
        "page"?: number;
        /**
          * The amount of items per page
         */
        "pageSize"?: number;
        /**
          * The options for the page size
         */
        "pageSizeOptions"?: number[];
        /**
          * The query to show in the search bar
         */
        "query"?: string;
        /**
          * Quick filters to show
         */
        "quickFilters"?: QuickFilter[];
        /**
          * The amount of filters being selected
         */
        "selectedFiltersAmount"?: number;
        /**
          * The current selection of items
         */
        "selectedRows"?: any[];
        /**
          * The key to determine if a row is selected
         */
        "selectionKey"?: string;
        /**
          * The total amount of items
         */
        "total": number;
    }
    interface PTableBody {
    }
    interface PTableContainer {
    }
    interface PTableDefinition {
        /**
          * The alignment of the column
         */
        "align"?: 'start' | 'center' | 'end';
        /**
          * The name of the column
         */
        "name"?: string;
        /**
          * Event to let the table know it has to re render
         */
        "onTableDefinitionChanged"?: (event: PTableDefinitionCustomEvent<boolean>) => void;
        /**
          * The path of the value of the item you want to display
         */
        "path"?: string;
        /**
          * The sizes of the column
         */
        "sizes"?: 'auto' | number | TableDefinitionSizes;
        /**
          * The template for the data view
         */
        "template"?: templateFunc;
        /**
          * The type of the column
         */
        "type"?: 'td' | 'th';
    }
    interface PTableFooter {
        /**
          * Wether to enable export
         */
        "enableExport"?: boolean;
        /**
          * Wether to enable page size select
         */
        "enablePageSize"?: boolean;
        /**
          * Wether to enable pagination
         */
        "enablePagination"?: boolean;
        /**
          * Event whenever the page changes
         */
        "onExport"?: (event: PTableFooterCustomEvent<number>) => void;
        /**
          * Event whenever the page changes
         */
        "onPageChange"?: (event: PTableFooterCustomEvent<number>) => void;
        /**
          * Event whenever the page changes
         */
        "onPageSizeChange"?: (event: PTableFooterCustomEvent<number>) => void;
        /**
          * The current page
         */
        "page"?: number;
        /**
          * The amount of items per page
         */
        "pageSize"?: number;
        /**
          * The options for the page size
         */
        "pageSizeOptions"?: number[];
        /**
          * The total amount of items
         */
        "total": number;
    }
    interface PTableHeader {
        /**
          * Active quick filter identifier
         */
        "activeQuickFilterIdentifier"?: string;
        /**
          * Wether to enable the edit button
         */
        "canEdit"?: boolean;
        /**
          * The template for the edit button text
         */
        "editButtonTemplate"?: buttonTemplateFunc;
        /**
          * Wether to show the edit button
         */
        "enableEdit"?: boolean;
        /**
          * Wether to show the filter button
         */
        "enableFilter"?: boolean;
        /**
          * Wether to show the search input
         */
        "enableSearch"?: boolean;
        /**
          * The template for the filter button text
         */
        "filterButtonTemplate"?: templateFunc;
        /**
          * The amount of items that are selected
         */
        "itemsSelectedAmount"?: number;
        /**
          * Event when the edit button is clicked
         */
        "onEdit"?: (event: PTableHeaderCustomEvent<null>) => void;
        /**
          * Event when the filter button is clicked
         */
        "onFilter"?: (event: PTableHeaderCustomEvent<null>) => void;
        /**
          * Event when the query changes
         */
        "onQueryChange"?: (event: PTableHeaderCustomEvent<string>) => void;
        /**
          * Event when one of the quick filters is clicked
         */
        "onQuickFilter"?: (event: PTableHeaderCustomEvent<QuickFilter>) => void;
        /**
          * The query to show in the search bar
         */
        "query"?: string;
        /**
          * Quick filters to show
         */
        "quickFilters"?: QuickFilter[];
        /**
          * The amount of filters being selected
         */
        "selectedFiltersAmount"?: number;
    }
    interface PTableRow {
        /**
          * Enable hover
         */
        "enableHover"?: boolean;
        /**
          * Variant of the header
         */
        "variant"?: 'default' | 'header';
    }
    interface PTag {
        /**
          * Wether to add the circle or not
         */
        "circle"?: boolean;
        /**
          * Variant of the tag
         */
        "variant"?: | 'positive'
        | 'unbiased'
        | 'negative'
        | 'info';
    }
    interface PTooltip {
        /**
          * Wether to someone can manually close the popover
         */
        "canManuallyClose"?: boolean;
        /**
          * Open change event
         */
        "onIsOpen"?: (event: PTooltipCustomEvent<boolean>) => void;
        /**
          * The placement of the popover
         */
        "placement"?: Placement;
        /**
          * The content of the popover
         */
        "popover"?: any;
        /**
          * Wether to show the popover
         */
        "show"?: boolean;
        /**
          * The strategy of the popover placement
         */
        "strategy"?: PositioningStrategy;
        /**
          * The variant of the popover
         */
        "variant"?: 'hover' | 'click' | 'error';
    }
    interface IntrinsicElements {
        "p-accordion": PAccordion;
        "p-avatar": PAvatar;
        "p-avatar-group": PAvatarGroup;
        "p-button": PButton;
        "p-card-body": PCardBody;
        "p-card-container": PCardContainer;
        "p-card-header": PCardHeader;
        "p-content-slider": PContentSlider;
        "p-counter": PCounter;
        "p-divider": PDivider;
        "p-dropdown": PDropdown;
        "p-dropdown-menu-container": PDropdownMenuContainer;
        "p-dropdown-menu-item": PDropdownMenuItem;
        "p-helper": PHelper;
        "p-icon": PIcon;
        "p-illustration": PIllustration;
        "p-info-panel": PInfoPanel;
        "p-input-group": PInputGroup;
        "p-layout": PLayout;
        "p-loader": PLoader;
        "p-modal": PModal;
        "p-modal-backdrop": PModalBackdrop;
        "p-modal-body": PModalBody;
        "p-modal-container": PModalContainer;
        "p-modal-footer": PModalFooter;
        "p-modal-header": PModalHeader;
        "p-navbar": PNavbar;
        "p-navigation-item": PNavigationItem;
        "p-page-size-select": PPageSizeSelect;
        "p-pagination": PPagination;
        "p-pagination-item": PPaginationItem;
        "p-profile": PProfile;
        "p-segment-container": PSegmentContainer;
        "p-segment-item": PSegmentItem;
        "p-slider-indicator": PSliderIndicator;
        "p-status": PStatus;
        "p-stepper": PStepper;
        "p-stepper-item": PStepperItem;
        "p-stepper-line": PStepperLine;
        "p-tab-group": PTabGroup;
        "p-tab-item": PTabItem;
        "p-table": PTable;
        "p-table-body": PTableBody;
        "p-table-container": PTableContainer;
        "p-table-definition": PTableDefinition;
        "p-table-footer": PTableFooter;
        "p-table-header": PTableHeader;
        "p-table-row": PTableRow;
        "p-tag": PTag;
        "p-tooltip": PTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "p-accordion": LocalJSX.PAccordion & JSXBase.HTMLAttributes<HTMLPAccordionElement>;
            "p-avatar": LocalJSX.PAvatar & JSXBase.HTMLAttributes<HTMLPAvatarElement>;
            "p-avatar-group": LocalJSX.PAvatarGroup & JSXBase.HTMLAttributes<HTMLPAvatarGroupElement>;
            "p-button": LocalJSX.PButton & JSXBase.HTMLAttributes<HTMLPButtonElement>;
            "p-card-body": LocalJSX.PCardBody & JSXBase.HTMLAttributes<HTMLPCardBodyElement>;
            "p-card-container": LocalJSX.PCardContainer & JSXBase.HTMLAttributes<HTMLPCardContainerElement>;
            "p-card-header": LocalJSX.PCardHeader & JSXBase.HTMLAttributes<HTMLPCardHeaderElement>;
            "p-content-slider": LocalJSX.PContentSlider & JSXBase.HTMLAttributes<HTMLPContentSliderElement>;
            "p-counter": LocalJSX.PCounter & JSXBase.HTMLAttributes<HTMLPCounterElement>;
            "p-divider": LocalJSX.PDivider & JSXBase.HTMLAttributes<HTMLPDividerElement>;
            "p-dropdown": LocalJSX.PDropdown & JSXBase.HTMLAttributes<HTMLPDropdownElement>;
            "p-dropdown-menu-container": LocalJSX.PDropdownMenuContainer & JSXBase.HTMLAttributes<HTMLPDropdownMenuContainerElement>;
            "p-dropdown-menu-item": LocalJSX.PDropdownMenuItem & JSXBase.HTMLAttributes<HTMLPDropdownMenuItemElement>;
            "p-helper": LocalJSX.PHelper & JSXBase.HTMLAttributes<HTMLPHelperElement>;
            "p-icon": LocalJSX.PIcon & JSXBase.HTMLAttributes<HTMLPIconElement>;
            "p-illustration": LocalJSX.PIllustration & JSXBase.HTMLAttributes<HTMLPIllustrationElement>;
            "p-info-panel": LocalJSX.PInfoPanel & JSXBase.HTMLAttributes<HTMLPInfoPanelElement>;
            "p-input-group": LocalJSX.PInputGroup & JSXBase.HTMLAttributes<HTMLPInputGroupElement>;
            "p-layout": LocalJSX.PLayout & JSXBase.HTMLAttributes<HTMLPLayoutElement>;
            "p-loader": LocalJSX.PLoader & JSXBase.HTMLAttributes<HTMLPLoaderElement>;
            "p-modal": LocalJSX.PModal & JSXBase.HTMLAttributes<HTMLPModalElement>;
            "p-modal-backdrop": LocalJSX.PModalBackdrop & JSXBase.HTMLAttributes<HTMLPModalBackdropElement>;
            "p-modal-body": LocalJSX.PModalBody & JSXBase.HTMLAttributes<HTMLPModalBodyElement>;
            "p-modal-container": LocalJSX.PModalContainer & JSXBase.HTMLAttributes<HTMLPModalContainerElement>;
            "p-modal-footer": LocalJSX.PModalFooter & JSXBase.HTMLAttributes<HTMLPModalFooterElement>;
            "p-modal-header": LocalJSX.PModalHeader & JSXBase.HTMLAttributes<HTMLPModalHeaderElement>;
            "p-navbar": LocalJSX.PNavbar & JSXBase.HTMLAttributes<HTMLPNavbarElement>;
            "p-navigation-item": LocalJSX.PNavigationItem & JSXBase.HTMLAttributes<HTMLPNavigationItemElement>;
            "p-page-size-select": LocalJSX.PPageSizeSelect & JSXBase.HTMLAttributes<HTMLPPageSizeSelectElement>;
            "p-pagination": LocalJSX.PPagination & JSXBase.HTMLAttributes<HTMLPPaginationElement>;
            "p-pagination-item": LocalJSX.PPaginationItem & JSXBase.HTMLAttributes<HTMLPPaginationItemElement>;
            "p-profile": LocalJSX.PProfile & JSXBase.HTMLAttributes<HTMLPProfileElement>;
            "p-segment-container": LocalJSX.PSegmentContainer & JSXBase.HTMLAttributes<HTMLPSegmentContainerElement>;
            "p-segment-item": LocalJSX.PSegmentItem & JSXBase.HTMLAttributes<HTMLPSegmentItemElement>;
            "p-slider-indicator": LocalJSX.PSliderIndicator & JSXBase.HTMLAttributes<HTMLPSliderIndicatorElement>;
            "p-status": LocalJSX.PStatus & JSXBase.HTMLAttributes<HTMLPStatusElement>;
            "p-stepper": LocalJSX.PStepper & JSXBase.HTMLAttributes<HTMLPStepperElement>;
            "p-stepper-item": LocalJSX.PStepperItem & JSXBase.HTMLAttributes<HTMLPStepperItemElement>;
            "p-stepper-line": LocalJSX.PStepperLine & JSXBase.HTMLAttributes<HTMLPStepperLineElement>;
            "p-tab-group": LocalJSX.PTabGroup & JSXBase.HTMLAttributes<HTMLPTabGroupElement>;
            "p-tab-item": LocalJSX.PTabItem & JSXBase.HTMLAttributes<HTMLPTabItemElement>;
            "p-table": LocalJSX.PTable & JSXBase.HTMLAttributes<HTMLPTableElement>;
            "p-table-body": LocalJSX.PTableBody & JSXBase.HTMLAttributes<HTMLPTableBodyElement>;
            "p-table-container": LocalJSX.PTableContainer & JSXBase.HTMLAttributes<HTMLPTableContainerElement>;
            "p-table-definition": LocalJSX.PTableDefinition & JSXBase.HTMLAttributes<HTMLPTableDefinitionElement>;
            "p-table-footer": LocalJSX.PTableFooter & JSXBase.HTMLAttributes<HTMLPTableFooterElement>;
            "p-table-header": LocalJSX.PTableHeader & JSXBase.HTMLAttributes<HTMLPTableHeaderElement>;
            "p-table-row": LocalJSX.PTableRow & JSXBase.HTMLAttributes<HTMLPTableRowElement>;
            "p-tag": LocalJSX.PTag & JSXBase.HTMLAttributes<HTMLPTagElement>;
            "p-tooltip": LocalJSX.PTooltip & JSXBase.HTMLAttributes<HTMLPTooltipElement>;
        }
    }
}
