/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { IconFlipOptions, IconVariant } from "./components/atoms/icon/icon.component";
import { RotateOptions, TextSizeOptions } from "./types/tailwind";
import { Placement, Strategy } from "@floating-ui/dom";
import { HTMLInputTypeAttribute } from "react";
import { templateFunc } from "./components/molecules/field-container/field-container.component";
import { templateFunc as templateFunc1 } from "./components/molecules/field-container/field-container.component";
import { IbanIconVariant, RotateOptions as RotateOptions1, TableDefinitionData, TableDefinitionTemplateFunc } from "./types";
import { IconFlipOptions as IconFlipOptions1, IconVariant as IconVariant1 } from "./components/atoms/icon/icon.component";
import { IconDeprecatedVariant } from "./components/atoms/icon-deprecated/icon.component";
import { IllustrationVariant } from "./components/atoms/illustration/illustration.component";
import { Observable } from "rxjs";
import { templateFunc as templateFunc2 } from "./components/molecules/page-size-select/page-size-select.component";
import { amountSelectedTemplateFunc, templateFunc as templateFunc3 } from "./components/organisms/table/table.component";
import { QuickFilter, RowClickEvent, TableColumnSizes } from "./types/table";
import { IconFlipOptions as IconFlipOptions2, IconVariant as IconVariant2, RotateOptions as RotateOptions2 } from "./components";
import { buttonTemplateFunc } from "./components/molecules/table-header/table-header.component";
import { TableColumn } from "./components/helpers/table-column/table-column.component";
import { buttonTemplateFunc as buttonTemplateFunc1, templateFunc as templateFunc4 } from "./components/molecules/table-header/table-header.component";
import { TableRowActionFunc, TableRowActionShowFunc } from "./components/helpers/table-row-action/table-row-action.component";
export { IconFlipOptions, IconVariant } from "./components/atoms/icon/icon.component";
export { RotateOptions, TextSizeOptions } from "./types/tailwind";
export { Placement, Strategy } from "@floating-ui/dom";
export { HTMLInputTypeAttribute } from "react";
export { templateFunc } from "./components/molecules/field-container/field-container.component";
export { templateFunc as templateFunc1 } from "./components/molecules/field-container/field-container.component";
export { IbanIconVariant, RotateOptions as RotateOptions1, TableDefinitionData, TableDefinitionTemplateFunc } from "./types";
export { IconFlipOptions as IconFlipOptions1, IconVariant as IconVariant1 } from "./components/atoms/icon/icon.component";
export { IconDeprecatedVariant } from "./components/atoms/icon-deprecated/icon.component";
export { IllustrationVariant } from "./components/atoms/illustration/illustration.component";
export { Observable } from "rxjs";
export { templateFunc as templateFunc2 } from "./components/molecules/page-size-select/page-size-select.component";
export { amountSelectedTemplateFunc, templateFunc as templateFunc3 } from "./components/organisms/table/table.component";
export { QuickFilter, RowClickEvent, TableColumnSizes } from "./types/table";
export { IconFlipOptions as IconFlipOptions2, IconVariant as IconVariant2, RotateOptions as RotateOptions2 } from "./components";
export { buttonTemplateFunc } from "./components/molecules/table-header/table-header.component";
export { TableColumn } from "./components/helpers/table-column/table-column.component";
export { buttonTemplateFunc as buttonTemplateFunc1, templateFunc as templateFunc4 } from "./components/molecules/table-header/table-header.component";
export { TableRowActionFunc, TableRowActionShowFunc } from "./components/helpers/table-row-action/table-row-action.component";
export namespace Components {
    interface PAccordion {
        /**
          * Wether the accordion can be closed
         */
        "closeable": boolean;
        /**
          * Header of the accordion
         */
        "header": string;
        /**
          * Wether the accordion is open
         */
        "open": boolean;
        /**
          * Wether the accordion can be opened
         */
        "openable": boolean;
    }
    interface PAttachment {
        /**
          * Wether the attachment is downloading
         */
        "downloading": boolean;
        /**
          * The error to show
         */
        "error": string;
        /**
          * Wether the attachment is uploading/loading
         */
        "loading": boolean;
        /**
          * The variant of the button
         */
        "mode": 'read' | 'write';
    }
    interface PAvatar {
        /**
          * The default image to show on errors
         */
        "defaultImage": string;
        /**
          * The letters to show on the empty state variant
         */
        "letters": string;
        /**
          * The size of the avatar
         */
        "size": | 'xs'
		| 'sm'
		| 'base'
		| 'lg'
		| 'xl'
		| '2xl'
		| '3xl'
		| '4xl';
        /**
          * The image used for the avatar
         */
        "src": string;
    }
    interface PAvatarGroup {
        /**
          * The amount to show after the avatars
         */
        "extra": number;
    }
    interface PBackdrop {
        /**
          * Wether to apply blur on the background of the backdrop
         */
        "applyBlur": boolean;
        /**
          * The class passed to the component
         */
        "class": string;
        /**
          * Wether the backdrop is closing
         */
        "closing": boolean;
        /**
          * Wether we should scroll lock the body
         */
        "scrollLock": boolean;
        /**
          * The variant of the backdrop
         */
        "variant": 'modal' | 'drawer';
    }
    interface PBadge {
    }
    interface PButton {
        /**
          * Wether to force an active state
         */
        "active": boolean;
        /**
          * The type of the button
         */
        "as": 'a' | 'button';
        /**
          * Position of the button in the button group, mostly un-used if not in a group
         */
        "buttonGroupPosition": 'start' | 'center' | 'end' | 'none';
        /**
          * Wether to show a chevron or not
         */
        "chevron": boolean | 'up' | 'down';
        /**
          * Chevron position
         */
        "chevronPosition": 'start' | 'end';
        /**
          * The class of the container passed by parent
         */
        "class": string;
        /**
          * Wether the button is disabled
         */
        "disabled": boolean;
        /**
          * Href in case of "text" version
         */
        "href": string;
        /**
          * Icon to show on the button
         */
        "icon": IconVariant;
        /**
          * Icon flip
         */
        "iconFlip": IconFlipOptions;
        /**
          * Wether the button is icon only
         */
        "iconOnly": boolean;
        /**
          * Icon position
         */
        "iconPosition": 'start' | 'end';
        /**
          * Icon rotate
         */
        "iconRotate": RotateOptions;
        /**
          * Wether the button should inherit text styles
         */
        "inheritText": boolean;
        /**
          * Wether to show a loader or not
         */
        "loading": boolean;
        /**
          * The size of the button
         */
        "size": 'sm' | 'base' | 'lg';
        /**
          * Target in case of "text" version
         */
        "target": string;
        /**
          * The type of the button
         */
        "type": 'button' | 'submit';
        /**
          * Wether the text variant has underline
         */
        "underline": boolean;
        /**
          * The variant of the button
         */
        "variant": | 'primary'
		| 'secondary'
		| 'transparent'
		| 'text'
		| 'dropdown';
    }
    interface PButtonGroup {
        /**
          * The size of the child buttons
         */
        "size": 'sm' | 'base' | 'lg';
    }
    interface PCalendar {
        /**
          * Wether to disable the weekends
         */
        "disableWeekends": boolean;
        /**
          * Disabled dates
         */
        "disabledDates"?: Array<Date | string> | string;
        /**
          * Max date
         */
        "maxDate": Date | string;
        /**
          * Min date
         */
        "minDate": Date | string;
        /**
          * The mode of the datepicker
         */
        "mode": 'year' | 'month' | 'day';
        /**
          * Wether to automatically preselect today
         */
        "preselectToday": boolean;
        /**
          * The current value
         */
        "value"?: Date | string;
        /**
          * The variant of the button
         */
        "variant": 'default' | 'embedded';
    }
    interface PCardBody {
        /**
          * Wether the button should inherit text styles
         */
        "inheritText": boolean;
    }
    interface PCardContainer {
        /**
          * Wether the card should be hoverable
         */
        "hoverable": boolean;
        /**
          * Wether the card should have shadow
         */
        "shadow": boolean;
    }
    interface PCardHeader {
        /**
          * Enable the title arrow
         */
        "arrow": boolean;
        /**
          * Content of the card header
         */
        "header": string;
    }
    interface PCheckbox {
        /**
          * Wether the checkbox is checked
         */
        "checked": boolean;
        /**
          * Wether the checkbox is disabled
         */
        "disabled": boolean;
        /**
          * The id of the checkbox button
         */
        "id": string;
        /**
          * Wether the checkbox is in indeterminate state
         */
        "indeterminate": boolean;
        /**
          * The name of the checkbox button
         */
        "name": string;
        /**
          * Wether the checkbox is required
         */
        "required": boolean;
        /**
          * The size of the checkbox
         */
        "size": 'sm' | 'base';
    }
    interface PContentSlider {
        /**
          * Wether to disable auto centering the content
         */
        "disableAutoCenter": boolean;
        /**
          * Wether to disable dragging the content
         */
        "disableDrag": boolean;
        /**
          * Wether to disable clicking the indicator scrolls content
         */
        "disableIndicatorClick": boolean;
        /**
          * Wether to hide the indicator on mobile
         */
        "hideMobileIndicator": boolean;
    }
    interface PCounter {
        /**
          * The size of the counter
         */
        "size": 'default' | 'mini';
        /**
          * The variant of the counter
         */
        "variant": 'info' | 'negative' | 'positive' | 'unbiased';
    }
    interface PCropper {
        /**
          * The return type of the onchange
         */
        "returnType": 'canvas' | 'base64';
        /**
          * The image to crop (url or base64)
         */
        "value": any;
        /**
          * Variant of the image that's being cropped
         */
        "variant": 'user' | 'company';
    }
    interface PDatepicker {
        /**
          * Wether to disable the weekends
         */
        "disableWeekends": boolean;
        /**
          * Wether the input group is disabled used by the datepicker
         */
        "disabled": boolean;
        /**
          * Disabled dates
         */
        "disabledDates"?: Array<Date | string> | string;
        /**
          * The helper of the input group used by the datepicker
         */
        "error": string;
        /**
          * The display & parse format to use
         */
        "format": string;
        /**
          * The helper of the input group used by the datepicker
         */
        "helper": string;
        /**
          * Hides the icon when filled
         */
        "hideIconWhenFilled": boolean;
        /**
          * The label of the input group used by the datepicker
         */
        "label": string;
        /**
          * Max date
         */
        "maxDate"?: Date | string;
        /**
          * Min date
         */
        "minDate"?: Date | string;
        /**
          * The mode of the datepicker
         */
        "mode": 'year' | 'month' | 'day';
        /**
          * The placeholder of the input
         */
        "placeholder": string;
        /**
          * The placement of the dropdown
         */
        "placement": Placement;
        /**
          * The prefix of the input group used by the datepicker
         */
        "prefix": string;
        /**
          * Wethter to automatically preselect today
         */
        "preselectToday": boolean;
        /**
          * Wether the field is required
         */
        "required": boolean;
        /**
          * The size of the input group used by the datepicker
         */
        "size": 'sm' | 'base';
        /**
          * The strategy of the dropdown placement
         */
        "strategy": Strategy;
        /**
          * The current value
         */
        "value": Date | string | null | undefined;
    }
    interface PDivider {
        /**
          * The variant of the modal body
         */
        "variant": 'horizontal' | 'vertical';
    }
    interface PDrawer {
        /**
          * Wether to apply blur to the backdrop
         */
        "applyBlur": boolean;
        /**
          * Wether to hide the drawer when the backdrop is clicked
         */
        "backdropClickClose": boolean;
        /**
          * Wether the drawer can be closed
         */
        "canClose": boolean;
        /**
          * The Header of the drawer
         */
        "header"?: string;
        /**
          * Wether we should scroll lock the body
         */
        "scrollLock": boolean;
        /**
          * Wether to show the drawer or not
         */
        "show": boolean;
        /**
          * Wether to show the close on mobile in the header
         */
        "showClose": boolean;
    }
    interface PDrawerBody {
        /**
          * The variant of the modal body
         */
        "variant": 'default' | 'table';
    }
    interface PDrawerContainer {
        /**
          * Wether the container is closing
         */
        "closing": boolean;
    }
    interface PDrawerHeader {
        /**
          * Wether to show the close button on mobile
         */
        "showClose": boolean;
    }
    interface PDropdown {
        /**
          * Wether to allow overflow in the container
         */
        "allowOverflow": boolean;
        /**
          * Wether to apply chevron automatically
         */
        "applyChevron": boolean;
        /**
          * Wether to apply the full width
         */
        "applyFullWidth": boolean;
        /**
          * Wether to apply the max width
         */
        "applyMaxWidth": boolean;
        /**
          * Wether to automatically calculate the width of the menu based on the trigger
         */
        "calculateWidth": boolean;
        /**
          * Chevron direction
         */
        "chevronDirection": 'up' | 'down';
        /**
          * Chevron position
         */
        "chevronPosition": 'start' | 'end';
        /**
          * Wether to automatically close the dropdown menu after clicking inside
         */
        "disableTriggerClick": boolean;
        /**
          * Wether to automatically close the dropdown menu after clicking inside
         */
        "insideClick": boolean;
        /**
          * The offset of the dropdown menu
         */
        "offset": number;
        /**
          * The content of the dropdown menu
         */
        "placement": Placement;
        /**
          * Wether the dropdown container should be scrollable when the threshold is met.
         */
        "scrollable": boolean | 'default' | 'large';
        /**
          * Wether to show the dropdown menu
         */
        "show": boolean;
        /**
          * The strategy of the dropdown placement
         */
        "strategy": Strategy;
        /**
          * Wether to use a portal for the dropdown container
         */
        "usePortal": boolean;
    }
    interface PDropdownMenuContainer {
        /**
          * Wether to allow overflow
         */
        "allowOverflow": boolean;
        /**
          * The class of the container passed by parent
         */
        "class": string;
        /**
          * Wether the container should all available space
         */
        "fullWidth": boolean;
        /**
          * Wether the container applies it's max width
         */
        "maxWidth": boolean;
        /**
          * Wether the container should be scrollable when the threshold is met.
         */
        "scrollable": boolean | 'default' | 'large' | 'xlarge';
    }
    interface PDropdownMenuItem {
        /**
          * Wether the dropdown menu item is active
         */
        "active": boolean;
        /**
          * Wether the dropdown menu item has a checkbox
         */
        "checkbox": boolean;
        /**
          * Wether the item is disabled
         */
        "disabled": boolean;
        /**
          * Wether to enable the hover state
         */
        "enableHover": boolean;
        /**
          * Icon of the navigation item
         */
        "icon": IconVariant;
        /**
          * wether to use the container for text
         */
        "useContainer": boolean;
        /**
          * The variant of the item
         */
        "variant": 'default' | 'negative';
    }
    interface PField {
        /**
          * Wether the input group is disabled
         */
        "disabled": boolean;
        /**
          * The error to display
         */
        "error": string;
        /**
          * The placement of the error popover
         */
        "errorPlacement": Placement;
        /**
          * The method to use when focusing the input
         */
        "focusMethod": 'focus' | 'click';
        /**
          * Wether the input group is focused
         */
        "focused": boolean;
        /**
          * Force show the error tooltip
         */
        "forceShowTooltip": boolean;
        /**
          * The helper of the input group
         */
        "helper": string;
        /**
          * Icon of the input group
         */
        "icon": IconVariant;
        /**
          * Icon flip
         */
        "iconFlip": IconFlipOptions;
        /**
          * Icon position
         */
        "iconPosition": 'start' | 'end';
        /**
          * Icon rotate
         */
        "iconRotate": RotateOptions;
        /**
          * The label of the input group
         */
        "label": string;
        /**
          * The template for the optional text
         */
        "optionalTemplate": templateFunc;
        /**
          * The placeholder of the input
         */
        "placeholder": string;
        /**
          * The prefix of the input group
         */
        "prefix": string;
        /**
          * The size of the input group
         */
        "properties": any | string;
        /**
          * Wether the field is required
         */
        "required": boolean;
        /**
          * Wether to select all text on focus
         */
        "selectAllOnFocus": boolean;
        /**
          * The size of the input group
         */
        "size": 'sm' | 'base';
        /**
          * The suffix of the input group
         */
        "suffix": string;
        /**
          * The type of the input group
         */
        "type": HTMLInputTypeAttribute | 'textarea' | 'slot';
        /**
          * The value of the input
         */
        "value": string;
    }
    interface PFieldContainer {
        /**
          * The helper of the input group
         */
        "error": string | HTMLSlotElement;
        /**
          * The placement of the error popover
         */
        "errorPlacement": Placement;
        /**
          * Force show the error tooltip
         */
        "forceShowTooltip": boolean;
        /**
          * The helper of the input group
         */
        "helper": string | HTMLSlotElement;
        /**
          * The label of the input group
         */
        "label": string | HTMLSlotElement;
        /**
          * The template for the optional text
         */
        "optionalTemplate": templateFunc1;
        /**
          * Wether the field is required
         */
        "required": boolean;
    }
    interface PFloatingMenuContainer {
        /**
          * Weather the container is used in the table
         */
        "usedInTable": boolean;
    }
    interface PFloatingMenuItem {
        /**
          * Wether the item is disabled
         */
        "disabled": boolean;
        /**
          * Wether it should have a hover effect
         */
        "hover": boolean;
    }
    interface PHelper {
        /**
          * The placement of the helper popover
         */
        "placement": Placement;
        /**
          * The strategy of the popover placement
         */
        "strategy": Strategy;
    }
    interface PIbanIcon {
        /**
          * The iban you want to get an icon for
         */
        "iban": string;
        /**
          * The variant of the icon you want toshow
         */
        "variant": IbanIconVariant;
    }
    interface PIcon {
        /**
          * Wether to flip the icon horizontally or vertically
         */
        "flip": IconFlipOptions1;
        /**
          * Wether to rotate the icon x degrees
         */
        "rotate": number;
        /**
          * The size of the icon, using tailwind sizes
         */
        "size": TextSizeOptions;
        /**
          * The icon the be displayed
         */
        "variant": IconVariant1;
    }
    interface PIconDeprecated {
        /**
          * Wether to flip the icon horizontally or vertically
         */
        "flip": IconFlipOptions;
        /**
          * Wether to rotate the icon x degrees
         */
        "rotate": RotateOptions;
        /**
          * The size of the icon, using tailwind sizes
         */
        "size": TextSizeOptions;
        /**
          * The icon the be displayed
         */
        "variant": IconDeprecatedVariant;
    }
    interface PIllustration {
        /**
          * The icon the be displayed
         */
        "variant": IllustrationVariant;
    }
    interface PInfoPanel {
        /**
          * Wether the panel can be closed
         */
        "closeable": boolean;
        /**
          * The content of the info panel
         */
        "content": string;
        /**
          * The header of the info panel
         */
        "header": string;
        /**
          * The variant of the info panel
         */
        "variant": 'info' | 'negative' | 'positive' | 'unbiased';
    }
    interface PInputError {
        /**
          * The error to show
         */
        "error": string;
        /**
          * Wether to force show the tooltip
         */
        "forceShowTooltip": boolean;
    }
    interface PLabel {
        /**
          * Define the behavior of the label
         */
        "behavior": | 'icon'
		| 'circle'
		| 'combination'
		| 'text'
		| 'icon-only';
        /**
          * Icon to show on the label
         */
        "icon": IconVariant;
        /**
          * Icon flip
         */
        "iconFlip": IconFlipOptions;
        /**
          * Icon position
         */
        "iconPosition": 'start' | 'end';
        /**
          * Icon rotate
         */
        "iconRotate": RotateOptions1;
        /**
          * Wether to keep the content on mobile
         */
        "keepMobileContent": boolean;
        /**
          * The size of the label
         */
        "size": 'small' | 'default';
        /**
          * Variant of the label
         */
        "variant": | 'neutral'
		| 'positive'
		| 'unbiased'
		| 'negative'
		| 'special'
		| 'info';
    }
    interface PLayout {
        /**
          * Variant of the layout
         */
        "variant": 'default' | 'login' | 'office';
    }
    interface PLoader {
        /**
          * Color of the loader
         */
        "color": 'indigo' | 'white' | 'storm';
        /**
          * !NOT IMPLEMENTED! Modal description for modal variant
         */
        "modalDescription": string;
        /**
          * !NOT IMPLEMENTED! Modal title for modal variant
         */
        "modalTitle": string;
        /**
          * Wether to show or hide the loader
         */
        "show": boolean | Observable<boolean>;
        /**
          * Variant of loader
         */
        "variant": 'inline' | 'full-width' | 'full-screen' | 'modal' | 'ghost';
    }
    interface PModal {
        /**
          * Wether to apply blur to the backdrop
         */
        "applyBlur": boolean;
        /**
          * Wether to hide the modal when the backdrop is clicked
         */
        "backdropClickClose": boolean;
        /**
          * The Header of the modal
         */
        "header"?: string;
        /**
          * Wether the body should have padding
         */
        "padding": boolean;
        /**
          * Wether we should scroll lock the body
         */
        "scrollLock": boolean;
        /**
          * Wether to show the modal or not
         */
        "show": boolean;
        /**
          * Wether to show the close button in the header
         */
        "showClose": boolean;
        /**
          * Wether to show the footer on mobile
         */
        "showMobileFooter": boolean;
        /**
          * The size of the modal container
         */
        "size": 'sm' | 'md' | 'lg' | 'xl';
        /**
          * The variant of the modal body
         */
        "variant": 'default' | 'table-flush';
    }
    interface PModalBody {
        /**
          * Wether the body should have padding
         */
        "padding": boolean;
        /**
          * Wether the modal body should be rounded at the bottom
         */
        "roundedBottom": boolean;
        /**
          * Wether the modal body should be rounded at the top
         */
        "roundedTop": boolean;
        /**
          * The variant of the modal body
         */
        "variant": 'default' | 'table-flush';
    }
    interface PModalContainer {
        /**
          * Wether the container is closing
         */
        "closing": boolean;
        /**
          * The size of the modal container
         */
        "size": 'sm' | 'md' | 'lg' | 'xl';
    }
    interface PModalFooter {
    }
    interface PModalHeader {
        /**
          * Wether to show the close button on mobile
         */
        "showClose": boolean;
    }
    interface PNavbar {
    }
    interface PNavigationItem {
        /**
          * Wether the navigation item is active
         */
        "active": boolean;
        /**
          * The element to use for the navigation item
         */
        "as": string;
        /**
          * The class of the container passed by parent
         */
        "class": string;
        /**
          * Icon of the navigation item
         */
        "counter": number | string;
        /**
          * The href of the navigation item
         */
        "href": string;
        /**
          * Icon of the navigation item
         */
        "icon": IconVariant;
        /**
          * Wether the navigation item is loading
         */
        "loading": boolean;
        /**
          * The target of the navigation item
         */
        "target": string;
    }
    interface PNavigationSection {
        /**
          * The header of the section
         */
        "header": string;
    }
    interface PNavigationTitle {
    }
    interface PPageSizeSelect {
        /**
          * The size of the button
         */
        "buttonSize": 'sm' | 'base';
        /**
          * The template for the data view
         */
        "buttonTemplate": templateFunc2;
        /**
          * Chevron position
         */
        "chevronPosition": 'start' | 'end';
        /**
          * Wether to hide when there is only 1 page available
         */
        "hidden": boolean;
        /**
          * The template for the data view
         */
        "itemTemplate": templateFunc2;
        /**
          * The current page
         */
        "size": number;
        /**
          * The available sizes
         */
        "sizeOptions": number[];
    }
    interface PPagination {
        /**
          * Wether to hide when there is only 1 page available
         */
        "hideOnSinglePage": boolean;
        /**
          * The current page
         */
        "page": number;
        /**
          * The amount of items per page
         */
        "pageSize": number;
        /**
          * The total amount of items
         */
        "total": number;
    }
    interface PPaginationItem {
        /**
          * Wether the pagination item is active
         */
        "active": boolean;
    }
    interface PPortal {
    }
    interface PProfile {
        /**
          * The position of the dropdown
         */
        "dropdownLocation": 'top-end' | 'bottom-end';
    }
    interface PRadio {
        /**
          * Wether the radio is checked
         */
        "checked": boolean;
        /**
          * Wether the radio is disabled
         */
        "disabled": boolean;
        /**
          * The id of the radio button
         */
        "id": string;
        /**
          * The name of the radio button
         */
        "name": string;
        /**
          * Wether the radio is required
         */
        "required": boolean;
        /**
          * The size of the radio
         */
        "size": 'sm' | 'base';
        /**
          * The value of the radio button
         */
        "value": string;
    }
    interface PSegmentContainer {
    }
    interface PSegmentItem {
        /**
          * Wether the segment item is active
         */
        "active": boolean;
        /**
          * Icon to show on the segment item
         */
        "icon": IconVariant;
        /**
          * Icon flip
         */
        "iconFlip": IconFlipOptions;
        /**
          * Wether the segment item is icon only
         */
        "iconOnly": boolean;
        /**
          * Icon rotate
         */
        "iconRotate": RotateOptions;
        /**
          * Size of the segment item
         */
        "size": 'small' | 'big';
    }
    interface PSelect {
        /**
          * The text to show when add item is being shown
         */
        "addItemText": string;
        /**
          * Wether to apply the item's class also on the selected item
         */
        "applyClassOnSelectedItem": string;
        /**
          * Wether the input uses async filtering
         */
        "asyncFilter": boolean;
        /**
          * Wether to automatically select the first item
         */
        "autoSelectFirst": boolean;
        /**
          * The placeholder of the input used for auto complete
         */
        "autocompletePlaceholder": string;
        /**
          * The key of avatar within an item to show
         */
        "avatarKey": string;
        /**
          * The key of avatar letters within an item to show when the avatar url doesn't work
         */
        "avatarLettersKey": string;
        /**
          * The key of a class in an item to apply
         */
        "classKey": string;
        /**
          * Wether the input group is disabled used by the select
         */
        "disabled": boolean;
        /**
          * The key of the object to display
         */
        "displayKey": string;
        /**
          * The key of the object to display in the dropdown (overwrites displayKey)
         */
        "dropdownDisplayKey": string | undefined;
        /**
          * The text to show when items is empty
         */
        "emptyStateText": string;
        /**
          * Wether to enable autocomplete
         */
        "enableAutocomplete": boolean;
        /**
          * Wether to show the select all item with multi select
         */
        "enableSelectAll": boolean;
        /**
          * The helper of the input group used by the select
         */
        "error": string;
        /**
          * The helper of the input group used by the select
         */
        "helper": string;
        /**
          * Icon of the select box
         */
        "icon": IconVariant;
        /**
          * The key of icon variant within an item to show
         */
        "iconKey": string;
        /**
          * The key to identify an object
         */
        "identifierKey": string;
        /**
          * The items to show in the dropdown
         */
        "items": string | any[];
        /**
          * The label of the input group used by the select
         */
        "label": string;
        /**
          * Wether to show loading items
         */
        "loading": boolean;
        /**
          * The maximum amount of items to display
         */
        "maxDisplayedItems": number;
        /**
          * Wether to enable multi select
         */
        "multi": boolean;
        /**
          * The placeholder of the input
         */
        "placeholder": string;
        /**
          * The prefix of the input group used by the select
         */
        "prefix": string;
        /**
          * The current query
         */
        "query": string;
        /**
          * The key of the object to display
         */
        "queryKey"?: string;
        /**
          * Wether the field is required
         */
        "required": boolean;
        /**
          * The icon to prefix for select all
         */
        "selectAllIcon": IconVariant | undefined;
        /**
          * The text of the select all item
         */
        "selectAllText": string;
        /**
          * The key of the object to display in the input (overwrites displayKey)
         */
        "selectionDisplayKey": string | undefined;
        /**
          * Wether to show a "add" item
         */
        "showAddItem": boolean;
        /**
          * Wether to show the chevron or not
         */
        "showChevron": boolean;
        /**
          * Wether to show the icon also on the selected Item
         */
        "showIconInSelectedItem": string;
        /**
          * The size of the input group used by the select
         */
        "size": 'sm' | 'base';
        /**
          * The current value
         */
        "value": any;
        /**
          * The key of the object to return
         */
        "valueKey": string;
    }
    interface PSliderIndicator {
        /**
          * Wether the slider indicator is active
         */
        "active": boolean;
    }
    interface PStatus {
        /**
          * Icon to show on the status
         */
        "icon": IconVariant;
        /**
          * Icon flip
         */
        "iconFlip": IconFlipOptions;
        /**
          * Icon rotate
         */
        "iconRotate": RotateOptions;
        /**
          * The variant of the status
         */
        "variant": 'default' | 'positive' | 'unbiased' | 'negative';
    }
    interface PStepper {
        /**
          * The currently active step
         */
        "activeStep": number;
        /**
          * The position of the content in case of vertical direction
         */
        "contentPosition": 'start' | 'end';
        /**
          * The direction of the stepper
         */
        "direction": 'horizontal' | 'vertical';
        /**
          * Wether to automatically apply active & finished to items
         */
        "enableAutoStatus": boolean;
    }
    interface PStepperItem {
        /**
          * Wether the step is active
         */
        "active": boolean;
        /**
          * The alignment of the step content
         */
        "align": 'start' | 'center' | 'end';
        /**
          * The position of the content in case of vertical direction
         */
        "contentPosition": 'start' | 'end';
        /**
          * The direction of the stepper step
         */
        "direction": 'horizontal' | 'vertical';
        /**
          * Wether the step is finished
         */
        "finished": boolean;
    }
    interface PStepperLine {
        /**
          * Wether the line is active
         */
        "active": boolean;
        /**
          * The direction of the stepper line
         */
        "direction": 'horizontal' | 'vertical';
    }
    interface PTabGroup {
    }
    interface PTabItem {
        /**
          * Wether the tab item is active
         */
        "active": boolean;
    }
    interface PTable {
        /**
          * Wether the action button is enabled
         */
        "actionButtonEnabled": boolean;
        /**
          * The action button icon
         */
        "actionButtonIcon": IconVariant2;
        /**
          * Wether the action button is loading
         */
        "actionButtonLoading": boolean;
        /**
          * The template for the action button text
         */
        "actionButtonTemplate": buttonTemplateFunc;
        /**
          * The action button text if changed
         */
        "actionButtonText": string;
        /**
          * Active quick filter identifier
         */
        "activeQuickFilterIdentifier": string;
        /**
          * The amount of loading rows to show
         */
        "amountOfLoadingRows": number;
        /**
          * A key to determine if a row can be selected
         */
        "canSelectKey": string;
        "emptyStateAction": templateFunc3;
        "emptyStateContent": templateFunc3;
        "emptyStateFilteredContent": templateFunc3;
        "emptyStateFilteredHeader": templateFunc3;
        "emptyStateHeader": templateFunc3;
        /**
          * Wether to show the action button
         */
        "enableAction": boolean;
        /**
          * Wether to enable empty state action
         */
        "enableEmptyStateAction": boolean;
        /**
          * Wether to enable export
         */
        "enableExport": boolean;
        /**
          * Wether to show the filter button
         */
        "enableFilter": boolean;
        /**
          * Wether to show the filter button on desktop
         */
        "enableFilterDesktop": boolean;
        /**
          * Wether to enable the floating menu
         */
        "enableFloatingMenu": boolean;
        /**
          * Wether to show the header
         */
        "enableFooter": boolean;
        /**
          * Wether to show the header
         */
        "enableHeader": boolean;
        /**
          * Wether to enable page size select
         */
        "enablePageSize": boolean;
        /**
          * Wether to enable pagination
         */
        "enablePagination": boolean;
        /**
          * Wether to enable row clicking
         */
        "enableRowClick": boolean;
        /**
          * Wether to enable selection
         */
        "enableRowSelection": boolean;
        /**
          * Wether to show the search input
         */
        "enableSearch": boolean;
        /**
          * The template for the filter button text
         */
        "filterButtonTemplate": templateFunc3;
        /**
          * The template for amount selected item in the floating menu
         */
        "floatingMenuAmountSelectedTemplate": amountSelectedTemplateFunc;
        /**
          * Wether the footer should show loading state
         */
        "footerLoading": boolean;
        /**
          * Wether the header should show loading state
         */
        "headerLoading": boolean;
        /**
          * Wether to hide when there is only 1 page available
         */
        "hideOnSinglePage": boolean;
        /**
          * The items to be fed to the table
         */
        "items": string;
        /**
          * Wether data is loading
         */
        "loading": boolean;
        /**
          * The current page
         */
        "page": number;
        /**
          * The amount of items per page
         */
        "pageSize": number;
        /**
          * The options for the page size
         */
        "pageSizeOptions": number[];
        /**
          * The query to show in the search bar
         */
        "query": string;
        /**
          * Quick filters to show
         */
        "quickFilters": QuickFilter[];
        /**
          * A limit to the amount of rows that can be selected
         */
        "rowSelectionLimit": number | undefined;
        /**
          * The amount of filters being selected
         */
        "selectedFiltersAmount": number;
        /**
          * The current selection of items
         */
        "selectedRows": any[];
        /**
          * The key to determine if a row is selected
         */
        "selectionKey": string;
        "shadow": boolean;
        /**
          * The total amount of items
         */
        "total": number;
    }
    interface PTableCell {
        /**
          * The checkbox to show
         */
        "checkbox": any;
        /**
          * The definition of the table column
         */
        "definition"?: TableColumn;
        /**
          * The index of the column
         */
        "index": number;
        /**
          * The item in question
         */
        "item": any;
        /**
          * The index of the row
         */
        "rowIndex": number;
        /**
          * Wether the table has actions
         */
        "tableHasActions": boolean;
        /**
          * The template to show
         */
        "template": TableDefinitionTemplateFunc;
        /**
          * The value of the column
         */
        "value": any;
        /**
          * The variant of the column
         */
        "variant": 'default' | 'loading' | 'header' | 'actions';
    }
    interface PTableColumn {
        /**
          * The alignment of the column
         */
        "align": 'start' | 'center' | 'end';
        /**
          * Wether the column should have a checkbox
         */
        "hasCheckbox": boolean;
        /**
          * Wether the column is the last in the row
         */
        "isLast": { [key: string]: boolean };
        /**
          * The name of the column
         */
        "name": string;
        /**
          * Parsed sizes based on the complete set of columns
         */
        "parsedSizes": | TableColumnSizes
		| undefined;
        /**
          * The path of the value of the item you want to display
         */
        "path": string;
        /**
          * The sizes of the column
         */
        "sizes": | 'auto'
		| 'hidden'
		| 'full'
		| number
		| TableColumnSizes;
        /**
          * The type of the column
         */
        "type": 'td' | 'th';
        /**
          * Wether the column should use the slot
         */
        "useSlot": boolean;
    }
    interface PTableContainer {
        "shadow": boolean;
    }
    interface PTableFooter {
        /**
          * Wether to enable export
         */
        "enableExport": boolean;
        /**
          * Wether to enable page size select
         */
        "enablePageSize": boolean;
        /**
          * Wether to enable pagination
         */
        "enablePagination": boolean;
        /**
          * Wether to hide when there is only 1 page available
         */
        "hideOnSinglePage": boolean;
        /**
          * Wether we want to show loading state
         */
        "loading": boolean;
        /**
          * The current page
         */
        "page": number;
        /**
          * The amount of items per page
         */
        "pageSize": number;
        /**
          * The options for the page size
         */
        "pageSizeOptions": number[];
        /**
          * The total amount of items
         */
        "total": number;
    }
    interface PTableHeader {
        /**
          * The template for the action button text
         */
        "actionButtonTemplate": buttonTemplateFunc1;
        /**
          * The action button icon
         */
        "actionIcon": IconVariant2;
        /**
          * Wether the action button is loading
         */
        "actionLoading": boolean;
        /**
          * The action button text if changed
         */
        "actionText": string;
        /**
          * Active quick filter identifier
         */
        "activeQuickFilterIdentifier": string;
        /**
          * Wether to enable the action button
         */
        "canUseAction": boolean;
        /**
          * Wether to show the action button
         */
        "enableAction": boolean;
        /**
          * Wether to show the filter button
         */
        "enableFilter": boolean;
        /**
          * Wether to show the filter button on desktop
         */
        "enableFilterDesktop": boolean;
        /**
          * Wether to show the search input
         */
        "enableSearch": boolean;
        /**
          * The template for the filter button text
         */
        "filterButtonTemplate": templateFunc4;
        /**
          * The amount of items that are selected
         */
        "itemsSelectedAmount": number;
        /**
          * Wether we want to show loading state
         */
        "loading": boolean;
        /**
          * The query to show in the search bar
         */
        "query": string;
        /**
          * Quick filters to show
         */
        "quickFilters": QuickFilter[];
        /**
          * The amount of filters being selected
         */
        "selectedFiltersAmount": number;
    }
    interface PTableRow {
        /**
          * Enable hover
         */
        "enableHover": boolean;
        /**
          * Variant of the header
         */
        "variant": 'default' | 'header';
    }
    interface PTableRowAction {
        /**
          * The action to trigger when used
         */
        "action": TableRowActionFunc;
        /**
          * Wether the action is disabled
         */
        "disabled": boolean;
        /**
          * Icon to show on the button
         */
        "icon": IconVariant2;
        /**
          * Icon flip
         */
        "iconFlip": IconFlipOptions2;
        /**
          * Wether the button is icon only
         */
        "iconOnly": boolean;
        /**
          * Icon rotate
         */
        "iconRotate": RotateOptions2;
        /**
          * Label of the action
         */
        "label": string;
        /**
          * Wether the action is loading
         */
        "loading": boolean;
        /**
          * A function for row actions of type "single" or "both" that determines if the action is shown on the row
         */
        "showFunction": TableRowActionShowFunc;
        /**
          * The type of action mutli = Only multi select action single = Only an action on the row both = Action on both locations
         */
        "type": 'both' | 'single' | 'multi';
    }
    interface PToast {
        /**
          * Icon to show on the button
         */
        "actionIcon": IconVariant;
        /**
          * Icon flip
         */
        "actionIconFlip": IconFlipOptions;
        /**
          * Icon rotate
         */
        "actionIconRotate": RotateOptions1;
        /**
          * The content of the toast
         */
        "content"?: string;
        /**
          * Wether to enable the close button
         */
        "enableAction": boolean;
        /**
          * The header of the toast
         */
        "header"?: string;
        /**
          * The variant of the toast
         */
        "variant": 'positive' | 'unbiased' | 'negative';
    }
    interface PToastContainer {
        /**
          * The placement of the container
         */
        "placement": 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end';
    }
    interface PToggle {
        /**
          * Wether the checkbox is checked
         */
        "checked": boolean;
        /**
          * Wether the checkbox is disabled
         */
        "disabled": boolean;
        /**
          * The id of the checkbox button
         */
        "id": string;
        /**
          * Wether the checkbox is in indeterminate state
         */
        "indeterminate": boolean;
        /**
          * The name of the checkbox button
         */
        "name": string;
        /**
          * Wether the checkbox is required
         */
        "required": boolean;
        /**
          * The size of the checkbox
         */
        "size": 'sm' | 'base';
    }
    interface PTooltip {
        /**
          * Wether to someone can manually close the popover
         */
        "canManuallyClose": boolean;
        /**
          * The content of the popover
         */
        "content": any;
        /**
          * Wether the tooltip can be shown by user input
         */
        "enableUserInput": boolean;
        /**
          * The offset of the popover
         */
        "offset": number;
        /**
          * The placement of the popover
         */
        "placement": Placement;
        /**
          * Wether to show the popover
         */
        "show": boolean;
        /**
          * The strategy of the popover placement
         */
        "strategy": Strategy;
        /**
          * Wether to use a portal for the tooltip
         */
        "usePortal": boolean;
        /**
          * The variant of the popover
         */
        "variant": 'hover' | 'click' | 'error';
    }
}
export interface PAccordionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPAccordionElement;
}
export interface PAttachmentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPAttachmentElement;
}
export interface PBackdropCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPBackdropElement;
}
export interface PButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPButtonElement;
}
export interface PCalendarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPCalendarElement;
}
export interface PCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPCheckboxElement;
}
export interface PCropperCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPCropperElement;
}
export interface PDatepickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPDatepickerElement;
}
export interface PDrawerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPDrawerElement;
}
export interface PDrawerHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPDrawerHeaderElement;
}
export interface PDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPDropdownElement;
}
export interface PFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPFieldElement;
}
export interface PFieldContainerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPFieldContainerElement;
}
export interface PInfoPanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPInfoPanelElement;
}
export interface PModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPModalElement;
}
export interface PModalHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPModalHeaderElement;
}
export interface PPageSizeSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPPageSizeSelectElement;
}
export interface PPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPPaginationElement;
}
export interface PRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPRadioElement;
}
export interface PSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPSelectElement;
}
export interface PTableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPTableElement;
}
export interface PTableColumnCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPTableColumnElement;
}
export interface PTableFooterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPTableFooterElement;
}
export interface PTableHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPTableHeaderElement;
}
export interface PToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPToastElement;
}
export interface PToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPToggleElement;
}
export interface PTooltipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPTooltipElement;
}
declare global {
    interface HTMLPAccordionElementEventMap {
        "isOpen": boolean;
    }
    interface HTMLPAccordionElement extends Components.PAccordion, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPAccordionElementEventMap>(type: K, listener: (this: HTMLPAccordionElement, ev: PAccordionCustomEvent<HTMLPAccordionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPAccordionElementEventMap>(type: K, listener: (this: HTMLPAccordionElement, ev: PAccordionCustomEvent<HTMLPAccordionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPAccordionElement: {
        prototype: HTMLPAccordionElement;
        new (): HTMLPAccordionElement;
    };
    interface HTMLPAttachmentElementEventMap {
        "download": any;
        "delete": any;
    }
    interface HTMLPAttachmentElement extends Components.PAttachment, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPAttachmentElementEventMap>(type: K, listener: (this: HTMLPAttachmentElement, ev: PAttachmentCustomEvent<HTMLPAttachmentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPAttachmentElementEventMap>(type: K, listener: (this: HTMLPAttachmentElement, ev: PAttachmentCustomEvent<HTMLPAttachmentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPAttachmentElement: {
        prototype: HTMLPAttachmentElement;
        new (): HTMLPAttachmentElement;
    };
    interface HTMLPAvatarElement extends Components.PAvatar, HTMLStencilElement {
    }
    var HTMLPAvatarElement: {
        prototype: HTMLPAvatarElement;
        new (): HTMLPAvatarElement;
    };
    interface HTMLPAvatarGroupElement extends Components.PAvatarGroup, HTMLStencilElement {
    }
    var HTMLPAvatarGroupElement: {
        prototype: HTMLPAvatarGroupElement;
        new (): HTMLPAvatarGroupElement;
    };
    interface HTMLPBackdropElementEventMap {
        "clicked": MouseEvent;
    }
    interface HTMLPBackdropElement extends Components.PBackdrop, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPBackdropElementEventMap>(type: K, listener: (this: HTMLPBackdropElement, ev: PBackdropCustomEvent<HTMLPBackdropElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPBackdropElementEventMap>(type: K, listener: (this: HTMLPBackdropElement, ev: PBackdropCustomEvent<HTMLPBackdropElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPBackdropElement: {
        prototype: HTMLPBackdropElement;
        new (): HTMLPBackdropElement;
    };
    interface HTMLPBadgeElement extends Components.PBadge, HTMLStencilElement {
    }
    var HTMLPBadgeElement: {
        prototype: HTMLPBadgeElement;
        new (): HTMLPBadgeElement;
    };
    interface HTMLPButtonElementEventMap {
        "onClick": MouseEvent;
    }
    interface HTMLPButtonElement extends Components.PButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPButtonElementEventMap>(type: K, listener: (this: HTMLPButtonElement, ev: PButtonCustomEvent<HTMLPButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPButtonElementEventMap>(type: K, listener: (this: HTMLPButtonElement, ev: PButtonCustomEvent<HTMLPButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPButtonElement: {
        prototype: HTMLPButtonElement;
        new (): HTMLPButtonElement;
    };
    interface HTMLPButtonGroupElement extends Components.PButtonGroup, HTMLStencilElement {
    }
    var HTMLPButtonGroupElement: {
        prototype: HTMLPButtonGroupElement;
        new (): HTMLPButtonGroupElement;
    };
    interface HTMLPCalendarElementEventMap {
        "valueChange": any;
    }
    interface HTMLPCalendarElement extends Components.PCalendar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPCalendarElementEventMap>(type: K, listener: (this: HTMLPCalendarElement, ev: PCalendarCustomEvent<HTMLPCalendarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPCalendarElementEventMap>(type: K, listener: (this: HTMLPCalendarElement, ev: PCalendarCustomEvent<HTMLPCalendarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPCalendarElement: {
        prototype: HTMLPCalendarElement;
        new (): HTMLPCalendarElement;
    };
    interface HTMLPCardBodyElement extends Components.PCardBody, HTMLStencilElement {
    }
    var HTMLPCardBodyElement: {
        prototype: HTMLPCardBodyElement;
        new (): HTMLPCardBodyElement;
    };
    interface HTMLPCardContainerElement extends Components.PCardContainer, HTMLStencilElement {
    }
    var HTMLPCardContainerElement: {
        prototype: HTMLPCardContainerElement;
        new (): HTMLPCardContainerElement;
    };
    interface HTMLPCardHeaderElement extends Components.PCardHeader, HTMLStencilElement {
    }
    var HTMLPCardHeaderElement: {
        prototype: HTMLPCardHeaderElement;
        new (): HTMLPCardHeaderElement;
    };
    interface HTMLPCheckboxElementEventMap {
        "checkedChange": boolean;
        "indeterminateChange": boolean;
    }
    interface HTMLPCheckboxElement extends Components.PCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPCheckboxElementEventMap>(type: K, listener: (this: HTMLPCheckboxElement, ev: PCheckboxCustomEvent<HTMLPCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPCheckboxElementEventMap>(type: K, listener: (this: HTMLPCheckboxElement, ev: PCheckboxCustomEvent<HTMLPCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPCheckboxElement: {
        prototype: HTMLPCheckboxElement;
        new (): HTMLPCheckboxElement;
    };
    interface HTMLPContentSliderElement extends Components.PContentSlider, HTMLStencilElement {
    }
    var HTMLPContentSliderElement: {
        prototype: HTMLPContentSliderElement;
        new (): HTMLPContentSliderElement;
    };
    interface HTMLPCounterElement extends Components.PCounter, HTMLStencilElement {
    }
    var HTMLPCounterElement: {
        prototype: HTMLPCounterElement;
        new (): HTMLPCounterElement;
    };
    interface HTMLPCropperElementEventMap {
        "valueChange": any;
    }
    interface HTMLPCropperElement extends Components.PCropper, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPCropperElementEventMap>(type: K, listener: (this: HTMLPCropperElement, ev: PCropperCustomEvent<HTMLPCropperElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPCropperElementEventMap>(type: K, listener: (this: HTMLPCropperElement, ev: PCropperCustomEvent<HTMLPCropperElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPCropperElement: {
        prototype: HTMLPCropperElement;
        new (): HTMLPCropperElement;
    };
    interface HTMLPDatepickerElementEventMap {
        "valueChange": any;
    }
    interface HTMLPDatepickerElement extends Components.PDatepicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPDatepickerElementEventMap>(type: K, listener: (this: HTMLPDatepickerElement, ev: PDatepickerCustomEvent<HTMLPDatepickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPDatepickerElementEventMap>(type: K, listener: (this: HTMLPDatepickerElement, ev: PDatepickerCustomEvent<HTMLPDatepickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPDatepickerElement: {
        prototype: HTMLPDatepickerElement;
        new (): HTMLPDatepickerElement;
    };
    interface HTMLPDividerElement extends Components.PDivider, HTMLStencilElement {
    }
    var HTMLPDividerElement: {
        prototype: HTMLPDividerElement;
        new (): HTMLPDividerElement;
    };
    interface HTMLPDrawerElementEventMap {
        "closeClicked": {
		event: MouseEvent;
		canClose: boolean;
    source: 'unknown' | 'backdrop' | 'close' | 'event'
	};
        "closed": null;
    }
    interface HTMLPDrawerElement extends Components.PDrawer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPDrawerElementEventMap>(type: K, listener: (this: HTMLPDrawerElement, ev: PDrawerCustomEvent<HTMLPDrawerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPDrawerElementEventMap>(type: K, listener: (this: HTMLPDrawerElement, ev: PDrawerCustomEvent<HTMLPDrawerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPDrawerElement: {
        prototype: HTMLPDrawerElement;
        new (): HTMLPDrawerElement;
    };
    interface HTMLPDrawerBodyElement extends Components.PDrawerBody, HTMLStencilElement {
    }
    var HTMLPDrawerBodyElement: {
        prototype: HTMLPDrawerBodyElement;
        new (): HTMLPDrawerBodyElement;
    };
    interface HTMLPDrawerContainerElement extends Components.PDrawerContainer, HTMLStencilElement {
    }
    var HTMLPDrawerContainerElement: {
        prototype: HTMLPDrawerContainerElement;
        new (): HTMLPDrawerContainerElement;
    };
    interface HTMLPDrawerHeaderElementEventMap {
        "close": MouseEvent;
    }
    interface HTMLPDrawerHeaderElement extends Components.PDrawerHeader, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPDrawerHeaderElementEventMap>(type: K, listener: (this: HTMLPDrawerHeaderElement, ev: PDrawerHeaderCustomEvent<HTMLPDrawerHeaderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPDrawerHeaderElementEventMap>(type: K, listener: (this: HTMLPDrawerHeaderElement, ev: PDrawerHeaderCustomEvent<HTMLPDrawerHeaderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPDrawerHeaderElement: {
        prototype: HTMLPDrawerHeaderElement;
        new (): HTMLPDrawerHeaderElement;
    };
    interface HTMLPDropdownElementEventMap {
        "isOpen": boolean;
    }
    interface HTMLPDropdownElement extends Components.PDropdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPDropdownElementEventMap>(type: K, listener: (this: HTMLPDropdownElement, ev: PDropdownCustomEvent<HTMLPDropdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPDropdownElementEventMap>(type: K, listener: (this: HTMLPDropdownElement, ev: PDropdownCustomEvent<HTMLPDropdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPDropdownElement: {
        prototype: HTMLPDropdownElement;
        new (): HTMLPDropdownElement;
    };
    interface HTMLPDropdownMenuContainerElement extends Components.PDropdownMenuContainer, HTMLStencilElement {
    }
    var HTMLPDropdownMenuContainerElement: {
        prototype: HTMLPDropdownMenuContainerElement;
        new (): HTMLPDropdownMenuContainerElement;
    };
    interface HTMLPDropdownMenuItemElement extends Components.PDropdownMenuItem, HTMLStencilElement {
    }
    var HTMLPDropdownMenuItemElement: {
        prototype: HTMLPDropdownMenuItemElement;
        new (): HTMLPDropdownMenuItemElement;
    };
    interface HTMLPFieldElementEventMap {
        "valueChange": string;
        "inputRefChange": HTMLInputElement | HTMLTextAreaElement;
    }
    interface HTMLPFieldElement extends Components.PField, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPFieldElementEventMap>(type: K, listener: (this: HTMLPFieldElement, ev: PFieldCustomEvent<HTMLPFieldElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPFieldElementEventMap>(type: K, listener: (this: HTMLPFieldElement, ev: PFieldCustomEvent<HTMLPFieldElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPFieldElement: {
        prototype: HTMLPFieldElement;
        new (): HTMLPFieldElement;
    };
    interface HTMLPFieldContainerElementEventMap {
        "focus": void;
    }
    interface HTMLPFieldContainerElement extends Components.PFieldContainer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPFieldContainerElementEventMap>(type: K, listener: (this: HTMLPFieldContainerElement, ev: PFieldContainerCustomEvent<HTMLPFieldContainerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPFieldContainerElementEventMap>(type: K, listener: (this: HTMLPFieldContainerElement, ev: PFieldContainerCustomEvent<HTMLPFieldContainerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPFieldContainerElement: {
        prototype: HTMLPFieldContainerElement;
        new (): HTMLPFieldContainerElement;
    };
    interface HTMLPFloatingMenuContainerElement extends Components.PFloatingMenuContainer, HTMLStencilElement {
    }
    var HTMLPFloatingMenuContainerElement: {
        prototype: HTMLPFloatingMenuContainerElement;
        new (): HTMLPFloatingMenuContainerElement;
    };
    interface HTMLPFloatingMenuItemElement extends Components.PFloatingMenuItem, HTMLStencilElement {
    }
    var HTMLPFloatingMenuItemElement: {
        prototype: HTMLPFloatingMenuItemElement;
        new (): HTMLPFloatingMenuItemElement;
    };
    interface HTMLPHelperElement extends Components.PHelper, HTMLStencilElement {
    }
    var HTMLPHelperElement: {
        prototype: HTMLPHelperElement;
        new (): HTMLPHelperElement;
    };
    interface HTMLPIbanIconElement extends Components.PIbanIcon, HTMLStencilElement {
    }
    var HTMLPIbanIconElement: {
        prototype: HTMLPIbanIconElement;
        new (): HTMLPIbanIconElement;
    };
    interface HTMLPIconElement extends Components.PIcon, HTMLStencilElement {
    }
    var HTMLPIconElement: {
        prototype: HTMLPIconElement;
        new (): HTMLPIconElement;
    };
    interface HTMLPIconDeprecatedElement extends Components.PIconDeprecated, HTMLStencilElement {
    }
    var HTMLPIconDeprecatedElement: {
        prototype: HTMLPIconDeprecatedElement;
        new (): HTMLPIconDeprecatedElement;
    };
    interface HTMLPIllustrationElement extends Components.PIllustration, HTMLStencilElement {
    }
    var HTMLPIllustrationElement: {
        prototype: HTMLPIllustrationElement;
        new (): HTMLPIllustrationElement;
    };
    interface HTMLPInfoPanelElementEventMap {
        "closed": void;
    }
    interface HTMLPInfoPanelElement extends Components.PInfoPanel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPInfoPanelElementEventMap>(type: K, listener: (this: HTMLPInfoPanelElement, ev: PInfoPanelCustomEvent<HTMLPInfoPanelElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPInfoPanelElementEventMap>(type: K, listener: (this: HTMLPInfoPanelElement, ev: PInfoPanelCustomEvent<HTMLPInfoPanelElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPInfoPanelElement: {
        prototype: HTMLPInfoPanelElement;
        new (): HTMLPInfoPanelElement;
    };
    interface HTMLPInputErrorElement extends Components.PInputError, HTMLStencilElement {
    }
    var HTMLPInputErrorElement: {
        prototype: HTMLPInputErrorElement;
        new (): HTMLPInputErrorElement;
    };
    interface HTMLPLabelElement extends Components.PLabel, HTMLStencilElement {
    }
    var HTMLPLabelElement: {
        prototype: HTMLPLabelElement;
        new (): HTMLPLabelElement;
    };
    interface HTMLPLayoutElement extends Components.PLayout, HTMLStencilElement {
    }
    var HTMLPLayoutElement: {
        prototype: HTMLPLayoutElement;
        new (): HTMLPLayoutElement;
    };
    interface HTMLPLoaderElement extends Components.PLoader, HTMLStencilElement {
    }
    var HTMLPLoaderElement: {
        prototype: HTMLPLoaderElement;
        new (): HTMLPLoaderElement;
    };
    interface HTMLPModalElementEventMap {
        "closeClicked": MouseEvent;
        "closed": string;
    }
    interface HTMLPModalElement extends Components.PModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPModalElementEventMap>(type: K, listener: (this: HTMLPModalElement, ev: PModalCustomEvent<HTMLPModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPModalElementEventMap>(type: K, listener: (this: HTMLPModalElement, ev: PModalCustomEvent<HTMLPModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPModalElement: {
        prototype: HTMLPModalElement;
        new (): HTMLPModalElement;
    };
    interface HTMLPModalBodyElement extends Components.PModalBody, HTMLStencilElement {
    }
    var HTMLPModalBodyElement: {
        prototype: HTMLPModalBodyElement;
        new (): HTMLPModalBodyElement;
    };
    interface HTMLPModalContainerElement extends Components.PModalContainer, HTMLStencilElement {
    }
    var HTMLPModalContainerElement: {
        prototype: HTMLPModalContainerElement;
        new (): HTMLPModalContainerElement;
    };
    interface HTMLPModalFooterElement extends Components.PModalFooter, HTMLStencilElement {
    }
    var HTMLPModalFooterElement: {
        prototype: HTMLPModalFooterElement;
        new (): HTMLPModalFooterElement;
    };
    interface HTMLPModalHeaderElementEventMap {
        "close": MouseEvent;
    }
    interface HTMLPModalHeaderElement extends Components.PModalHeader, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPModalHeaderElementEventMap>(type: K, listener: (this: HTMLPModalHeaderElement, ev: PModalHeaderCustomEvent<HTMLPModalHeaderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPModalHeaderElementEventMap>(type: K, listener: (this: HTMLPModalHeaderElement, ev: PModalHeaderCustomEvent<HTMLPModalHeaderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPModalHeaderElement: {
        prototype: HTMLPModalHeaderElement;
        new (): HTMLPModalHeaderElement;
    };
    interface HTMLPNavbarElement extends Components.PNavbar, HTMLStencilElement {
    }
    var HTMLPNavbarElement: {
        prototype: HTMLPNavbarElement;
        new (): HTMLPNavbarElement;
    };
    interface HTMLPNavigationItemElement extends Components.PNavigationItem, HTMLStencilElement {
    }
    var HTMLPNavigationItemElement: {
        prototype: HTMLPNavigationItemElement;
        new (): HTMLPNavigationItemElement;
    };
    interface HTMLPNavigationSectionElement extends Components.PNavigationSection, HTMLStencilElement {
    }
    var HTMLPNavigationSectionElement: {
        prototype: HTMLPNavigationSectionElement;
        new (): HTMLPNavigationSectionElement;
    };
    interface HTMLPNavigationTitleElement extends Components.PNavigationTitle, HTMLStencilElement {
    }
    var HTMLPNavigationTitleElement: {
        prototype: HTMLPNavigationTitleElement;
        new (): HTMLPNavigationTitleElement;
    };
    interface HTMLPPageSizeSelectElementEventMap {
        "sizeChange": number;
    }
    interface HTMLPPageSizeSelectElement extends Components.PPageSizeSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPPageSizeSelectElementEventMap>(type: K, listener: (this: HTMLPPageSizeSelectElement, ev: PPageSizeSelectCustomEvent<HTMLPPageSizeSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPPageSizeSelectElementEventMap>(type: K, listener: (this: HTMLPPageSizeSelectElement, ev: PPageSizeSelectCustomEvent<HTMLPPageSizeSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPPageSizeSelectElement: {
        prototype: HTMLPPageSizeSelectElement;
        new (): HTMLPPageSizeSelectElement;
    };
    interface HTMLPPaginationElementEventMap {
        "pageChange": number;
    }
    interface HTMLPPaginationElement extends Components.PPagination, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPPaginationElementEventMap>(type: K, listener: (this: HTMLPPaginationElement, ev: PPaginationCustomEvent<HTMLPPaginationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPPaginationElementEventMap>(type: K, listener: (this: HTMLPPaginationElement, ev: PPaginationCustomEvent<HTMLPPaginationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPPaginationElement: {
        prototype: HTMLPPaginationElement;
        new (): HTMLPPaginationElement;
    };
    interface HTMLPPaginationItemElement extends Components.PPaginationItem, HTMLStencilElement {
    }
    var HTMLPPaginationItemElement: {
        prototype: HTMLPPaginationItemElement;
        new (): HTMLPPaginationItemElement;
    };
    interface HTMLPPortalElement extends Components.PPortal, HTMLStencilElement {
    }
    var HTMLPPortalElement: {
        prototype: HTMLPPortalElement;
        new (): HTMLPPortalElement;
    };
    interface HTMLPProfileElement extends Components.PProfile, HTMLStencilElement {
    }
    var HTMLPProfileElement: {
        prototype: HTMLPProfileElement;
        new (): HTMLPProfileElement;
    };
    interface HTMLPRadioElementEventMap {
        "checkedChange": boolean;
    }
    interface HTMLPRadioElement extends Components.PRadio, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPRadioElementEventMap>(type: K, listener: (this: HTMLPRadioElement, ev: PRadioCustomEvent<HTMLPRadioElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPRadioElementEventMap>(type: K, listener: (this: HTMLPRadioElement, ev: PRadioCustomEvent<HTMLPRadioElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPRadioElement: {
        prototype: HTMLPRadioElement;
        new (): HTMLPRadioElement;
    };
    interface HTMLPSegmentContainerElement extends Components.PSegmentContainer, HTMLStencilElement {
    }
    var HTMLPSegmentContainerElement: {
        prototype: HTMLPSegmentContainerElement;
        new (): HTMLPSegmentContainerElement;
    };
    interface HTMLPSegmentItemElement extends Components.PSegmentItem, HTMLStencilElement {
    }
    var HTMLPSegmentItemElement: {
        prototype: HTMLPSegmentItemElement;
        new (): HTMLPSegmentItemElement;
    };
    interface HTMLPSelectElementEventMap {
        "queryChange": string;
        "valueChange": any;
        "selectAllChange": any;
        "dropdownShown": any;
        "add": any;
    }
    interface HTMLPSelectElement extends Components.PSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPSelectElementEventMap>(type: K, listener: (this: HTMLPSelectElement, ev: PSelectCustomEvent<HTMLPSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPSelectElementEventMap>(type: K, listener: (this: HTMLPSelectElement, ev: PSelectCustomEvent<HTMLPSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPSelectElement: {
        prototype: HTMLPSelectElement;
        new (): HTMLPSelectElement;
    };
    interface HTMLPSliderIndicatorElement extends Components.PSliderIndicator, HTMLStencilElement {
    }
    var HTMLPSliderIndicatorElement: {
        prototype: HTMLPSliderIndicatorElement;
        new (): HTMLPSliderIndicatorElement;
    };
    interface HTMLPStatusElement extends Components.PStatus, HTMLStencilElement {
    }
    var HTMLPStatusElement: {
        prototype: HTMLPStatusElement;
        new (): HTMLPStatusElement;
    };
    interface HTMLPStepperElement extends Components.PStepper, HTMLStencilElement {
    }
    var HTMLPStepperElement: {
        prototype: HTMLPStepperElement;
        new (): HTMLPStepperElement;
    };
    interface HTMLPStepperItemElement extends Components.PStepperItem, HTMLStencilElement {
    }
    var HTMLPStepperItemElement: {
        prototype: HTMLPStepperItemElement;
        new (): HTMLPStepperItemElement;
    };
    interface HTMLPStepperLineElement extends Components.PStepperLine, HTMLStencilElement {
    }
    var HTMLPStepperLineElement: {
        prototype: HTMLPStepperLineElement;
        new (): HTMLPStepperLineElement;
    };
    interface HTMLPTabGroupElement extends Components.PTabGroup, HTMLStencilElement {
    }
    var HTMLPTabGroupElement: {
        prototype: HTMLPTabGroupElement;
        new (): HTMLPTabGroupElement;
    };
    interface HTMLPTabItemElement extends Components.PTabItem, HTMLStencilElement {
    }
    var HTMLPTabItemElement: {
        prototype: HTMLPTabItemElement;
        new (): HTMLPTabItemElement;
    };
    interface HTMLPTableElementEventMap {
        "selectedRowsChange": any;
        "rowClick": RowClickEvent;
        "rowSelected": any;
        "rowDeselected": any;
        "hasRendered": number;
        "quickFilter": QuickFilter;
        "queryChange": string;
        "filter": null;
        "action": null;
        "pageChange": number;
        "pageSizeChange": number;
        "export": number;
        "emptyStateActionClick": null;
    }
    interface HTMLPTableElement extends Components.PTable, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPTableElementEventMap>(type: K, listener: (this: HTMLPTableElement, ev: PTableCustomEvent<HTMLPTableElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPTableElementEventMap>(type: K, listener: (this: HTMLPTableElement, ev: PTableCustomEvent<HTMLPTableElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPTableElement: {
        prototype: HTMLPTableElement;
        new (): HTMLPTableElement;
    };
    interface HTMLPTableCellElement extends Components.PTableCell, HTMLStencilElement {
    }
    var HTMLPTableCellElement: {
        prototype: HTMLPTableCellElement;
        new (): HTMLPTableCellElement;
    };
    interface HTMLPTableColumnElementEventMap {
        "tableDefinitionChanged": boolean;
    }
    interface HTMLPTableColumnElement extends Components.PTableColumn, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPTableColumnElementEventMap>(type: K, listener: (this: HTMLPTableColumnElement, ev: PTableColumnCustomEvent<HTMLPTableColumnElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPTableColumnElementEventMap>(type: K, listener: (this: HTMLPTableColumnElement, ev: PTableColumnCustomEvent<HTMLPTableColumnElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPTableColumnElement: {
        prototype: HTMLPTableColumnElement;
        new (): HTMLPTableColumnElement;
    };
    interface HTMLPTableContainerElement extends Components.PTableContainer, HTMLStencilElement {
    }
    var HTMLPTableContainerElement: {
        prototype: HTMLPTableContainerElement;
        new (): HTMLPTableContainerElement;
    };
    interface HTMLPTableFooterElementEventMap {
        "pageChange": number;
        "pageSizeChange": number;
        "export": number;
    }
    interface HTMLPTableFooterElement extends Components.PTableFooter, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPTableFooterElementEventMap>(type: K, listener: (this: HTMLPTableFooterElement, ev: PTableFooterCustomEvent<HTMLPTableFooterElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPTableFooterElementEventMap>(type: K, listener: (this: HTMLPTableFooterElement, ev: PTableFooterCustomEvent<HTMLPTableFooterElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPTableFooterElement: {
        prototype: HTMLPTableFooterElement;
        new (): HTMLPTableFooterElement;
    };
    interface HTMLPTableHeaderElementEventMap {
        "quickFilter": QuickFilter;
        "queryChange": string;
        "filter": null;
        "action": null;
    }
    interface HTMLPTableHeaderElement extends Components.PTableHeader, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPTableHeaderElementEventMap>(type: K, listener: (this: HTMLPTableHeaderElement, ev: PTableHeaderCustomEvent<HTMLPTableHeaderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPTableHeaderElementEventMap>(type: K, listener: (this: HTMLPTableHeaderElement, ev: PTableHeaderCustomEvent<HTMLPTableHeaderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPTableHeaderElement: {
        prototype: HTMLPTableHeaderElement;
        new (): HTMLPTableHeaderElement;
    };
    interface HTMLPTableRowElement extends Components.PTableRow, HTMLStencilElement {
    }
    var HTMLPTableRowElement: {
        prototype: HTMLPTableRowElement;
        new (): HTMLPTableRowElement;
    };
    interface HTMLPTableRowActionElement extends Components.PTableRowAction, HTMLStencilElement {
    }
    var HTMLPTableRowActionElement: {
        prototype: HTMLPTableRowActionElement;
        new (): HTMLPTableRowActionElement;
    };
    interface HTMLPToastElementEventMap {
        "action": MouseEvent;
    }
    interface HTMLPToastElement extends Components.PToast, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPToastElementEventMap>(type: K, listener: (this: HTMLPToastElement, ev: PToastCustomEvent<HTMLPToastElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPToastElementEventMap>(type: K, listener: (this: HTMLPToastElement, ev: PToastCustomEvent<HTMLPToastElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPToastElement: {
        prototype: HTMLPToastElement;
        new (): HTMLPToastElement;
    };
    interface HTMLPToastContainerElement extends Components.PToastContainer, HTMLStencilElement {
    }
    var HTMLPToastContainerElement: {
        prototype: HTMLPToastContainerElement;
        new (): HTMLPToastContainerElement;
    };
    interface HTMLPToggleElementEventMap {
        "checkedChange": boolean;
        "indeterminateChange": boolean;
    }
    interface HTMLPToggleElement extends Components.PToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPToggleElementEventMap>(type: K, listener: (this: HTMLPToggleElement, ev: PToggleCustomEvent<HTMLPToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPToggleElementEventMap>(type: K, listener: (this: HTMLPToggleElement, ev: PToggleCustomEvent<HTMLPToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPToggleElement: {
        prototype: HTMLPToggleElement;
        new (): HTMLPToggleElement;
    };
    interface HTMLPTooltipElementEventMap {
        "isOpen": boolean;
    }
    interface HTMLPTooltipElement extends Components.PTooltip, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPTooltipElementEventMap>(type: K, listener: (this: HTMLPTooltipElement, ev: PTooltipCustomEvent<HTMLPTooltipElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPTooltipElementEventMap>(type: K, listener: (this: HTMLPTooltipElement, ev: PTooltipCustomEvent<HTMLPTooltipElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPTooltipElement: {
        prototype: HTMLPTooltipElement;
        new (): HTMLPTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "p-accordion": HTMLPAccordionElement;
        "p-attachment": HTMLPAttachmentElement;
        "p-avatar": HTMLPAvatarElement;
        "p-avatar-group": HTMLPAvatarGroupElement;
        "p-backdrop": HTMLPBackdropElement;
        "p-badge": HTMLPBadgeElement;
        "p-button": HTMLPButtonElement;
        "p-button-group": HTMLPButtonGroupElement;
        "p-calendar": HTMLPCalendarElement;
        "p-card-body": HTMLPCardBodyElement;
        "p-card-container": HTMLPCardContainerElement;
        "p-card-header": HTMLPCardHeaderElement;
        "p-checkbox": HTMLPCheckboxElement;
        "p-content-slider": HTMLPContentSliderElement;
        "p-counter": HTMLPCounterElement;
        "p-cropper": HTMLPCropperElement;
        "p-datepicker": HTMLPDatepickerElement;
        "p-divider": HTMLPDividerElement;
        "p-drawer": HTMLPDrawerElement;
        "p-drawer-body": HTMLPDrawerBodyElement;
        "p-drawer-container": HTMLPDrawerContainerElement;
        "p-drawer-header": HTMLPDrawerHeaderElement;
        "p-dropdown": HTMLPDropdownElement;
        "p-dropdown-menu-container": HTMLPDropdownMenuContainerElement;
        "p-dropdown-menu-item": HTMLPDropdownMenuItemElement;
        "p-field": HTMLPFieldElement;
        "p-field-container": HTMLPFieldContainerElement;
        "p-floating-menu-container": HTMLPFloatingMenuContainerElement;
        "p-floating-menu-item": HTMLPFloatingMenuItemElement;
        "p-helper": HTMLPHelperElement;
        "p-iban-icon": HTMLPIbanIconElement;
        "p-icon": HTMLPIconElement;
        "p-icon-deprecated": HTMLPIconDeprecatedElement;
        "p-illustration": HTMLPIllustrationElement;
        "p-info-panel": HTMLPInfoPanelElement;
        "p-input-error": HTMLPInputErrorElement;
        "p-label": HTMLPLabelElement;
        "p-layout": HTMLPLayoutElement;
        "p-loader": HTMLPLoaderElement;
        "p-modal": HTMLPModalElement;
        "p-modal-body": HTMLPModalBodyElement;
        "p-modal-container": HTMLPModalContainerElement;
        "p-modal-footer": HTMLPModalFooterElement;
        "p-modal-header": HTMLPModalHeaderElement;
        "p-navbar": HTMLPNavbarElement;
        "p-navigation-item": HTMLPNavigationItemElement;
        "p-navigation-section": HTMLPNavigationSectionElement;
        "p-navigation-title": HTMLPNavigationTitleElement;
        "p-page-size-select": HTMLPPageSizeSelectElement;
        "p-pagination": HTMLPPaginationElement;
        "p-pagination-item": HTMLPPaginationItemElement;
        "p-portal": HTMLPPortalElement;
        "p-profile": HTMLPProfileElement;
        "p-radio": HTMLPRadioElement;
        "p-segment-container": HTMLPSegmentContainerElement;
        "p-segment-item": HTMLPSegmentItemElement;
        "p-select": HTMLPSelectElement;
        "p-slider-indicator": HTMLPSliderIndicatorElement;
        "p-status": HTMLPStatusElement;
        "p-stepper": HTMLPStepperElement;
        "p-stepper-item": HTMLPStepperItemElement;
        "p-stepper-line": HTMLPStepperLineElement;
        "p-tab-group": HTMLPTabGroupElement;
        "p-tab-item": HTMLPTabItemElement;
        "p-table": HTMLPTableElement;
        "p-table-cell": HTMLPTableCellElement;
        "p-table-column": HTMLPTableColumnElement;
        "p-table-container": HTMLPTableContainerElement;
        "p-table-footer": HTMLPTableFooterElement;
        "p-table-header": HTMLPTableHeaderElement;
        "p-table-row": HTMLPTableRowElement;
        "p-table-row-action": HTMLPTableRowActionElement;
        "p-toast": HTMLPToastElement;
        "p-toast-container": HTMLPToastContainerElement;
        "p-toggle": HTMLPToggleElement;
        "p-tooltip": HTMLPTooltipElement;
    }
}
declare namespace LocalJSX {
    interface PAccordion {
        /**
          * Wether the accordion can be closed
         */
        "closeable"?: boolean;
        /**
          * Header of the accordion
         */
        "header": string;
        /**
          * Open change event
         */
        "onIsOpen"?: (event: PAccordionCustomEvent<boolean>) => void;
        /**
          * Wether the accordion is open
         */
        "open"?: boolean;
        /**
          * Wether the accordion can be opened
         */
        "openable"?: boolean;
    }
    interface PAttachment {
        /**
          * Wether the attachment is downloading
         */
        "downloading"?: boolean;
        /**
          * The error to show
         */
        "error"?: string;
        /**
          * Wether the attachment is uploading/loading
         */
        "loading"?: boolean;
        /**
          * The variant of the button
         */
        "mode"?: 'read' | 'write';
        /**
          * Event when delete is pressed
         */
        "onDelete"?: (event: PAttachmentCustomEvent<any>) => void;
        /**
          * Event when download is pressed
         */
        "onDownload"?: (event: PAttachmentCustomEvent<any>) => void;
    }
    interface PAvatar {
        /**
          * The default image to show on errors
         */
        "defaultImage"?: string;
        /**
          * The letters to show on the empty state variant
         */
        "letters"?: string;
        /**
          * The size of the avatar
         */
        "size"?: | 'xs'
		| 'sm'
		| 'base'
		| 'lg'
		| 'xl'
		| '2xl'
		| '3xl'
		| '4xl';
        /**
          * The image used for the avatar
         */
        "src": string;
    }
    interface PAvatarGroup {
        /**
          * The amount to show after the avatars
         */
        "extra"?: number;
    }
    interface PBackdrop {
        /**
          * Wether to apply blur on the background of the backdrop
         */
        "applyBlur"?: boolean;
        /**
          * The class passed to the component
         */
        "class"?: string;
        /**
          * Wether the backdrop is closing
         */
        "closing"?: boolean;
        /**
          * When the backdrop is clicked
         */
        "onClicked"?: (event: PBackdropCustomEvent<MouseEvent>) => void;
        /**
          * Wether we should scroll lock the body
         */
        "scrollLock"?: boolean;
        /**
          * The variant of the backdrop
         */
        "variant"?: 'modal' | 'drawer';
    }
    interface PBadge {
    }
    interface PButton {
        /**
          * Wether to force an active state
         */
        "active"?: boolean;
        /**
          * The type of the button
         */
        "as"?: 'a' | 'button';
        /**
          * Position of the button in the button group, mostly un-used if not in a group
         */
        "buttonGroupPosition"?: 'start' | 'center' | 'end' | 'none';
        /**
          * Wether to show a chevron or not
         */
        "chevron"?: boolean | 'up' | 'down';
        /**
          * Chevron position
         */
        "chevronPosition"?: 'start' | 'end';
        /**
          * The class of the container passed by parent
         */
        "class"?: string;
        /**
          * Wether the button is disabled
         */
        "disabled"?: boolean;
        /**
          * Href in case of "text" version
         */
        "href"?: string;
        /**
          * Icon to show on the button
         */
        "icon"?: IconVariant;
        /**
          * Icon flip
         */
        "iconFlip"?: IconFlipOptions;
        /**
          * Wether the button is icon only
         */
        "iconOnly"?: boolean;
        /**
          * Icon position
         */
        "iconPosition"?: 'start' | 'end';
        /**
          * Icon rotate
         */
        "iconRotate"?: RotateOptions;
        /**
          * Wether the button should inherit text styles
         */
        "inheritText"?: boolean;
        /**
          * Wether to show a loader or not
         */
        "loading"?: boolean;
        /**
          * Button click event
         */
        "onOnClick"?: (event: PButtonCustomEvent<MouseEvent>) => void;
        /**
          * The size of the button
         */
        "size"?: 'sm' | 'base' | 'lg';
        /**
          * Target in case of "text" version
         */
        "target"?: string;
        /**
          * The type of the button
         */
        "type"?: 'button' | 'submit';
        /**
          * Wether the text variant has underline
         */
        "underline"?: boolean;
        /**
          * The variant of the button
         */
        "variant"?: | 'primary'
		| 'secondary'
		| 'transparent'
		| 'text'
		| 'dropdown';
    }
    interface PButtonGroup {
        /**
          * The size of the child buttons
         */
        "size"?: 'sm' | 'base' | 'lg';
    }
    interface PCalendar {
        /**
          * Wether to disable the weekends
         */
        "disableWeekends"?: boolean;
        /**
          * Disabled dates
         */
        "disabledDates"?: Array<Date | string> | string;
        /**
          * Max date
         */
        "maxDate"?: Date | string;
        /**
          * Min date
         */
        "minDate"?: Date | string;
        /**
          * The mode of the datepicker
         */
        "mode"?: 'year' | 'month' | 'day';
        /**
          * Event when the value changes
         */
        "onValueChange"?: (event: PCalendarCustomEvent<any>) => void;
        /**
          * Wether to automatically preselect today
         */
        "preselectToday"?: boolean;
        /**
          * The current value
         */
        "value"?: Date | string;
        /**
          * The variant of the button
         */
        "variant"?: 'default' | 'embedded';
    }
    interface PCardBody {
        /**
          * Wether the button should inherit text styles
         */
        "inheritText"?: boolean;
    }
    interface PCardContainer {
        /**
          * Wether the card should be hoverable
         */
        "hoverable"?: boolean;
        /**
          * Wether the card should have shadow
         */
        "shadow"?: boolean;
    }
    interface PCardHeader {
        /**
          * Enable the title arrow
         */
        "arrow"?: boolean;
        /**
          * Content of the card header
         */
        "header"?: string;
    }
    interface PCheckbox {
        /**
          * Wether the checkbox is checked
         */
        "checked"?: boolean;
        /**
          * Wether the checkbox is disabled
         */
        "disabled"?: boolean;
        /**
          * The id of the checkbox button
         */
        "id"?: string;
        /**
          * Wether the checkbox is in indeterminate state
         */
        "indeterminate"?: boolean;
        /**
          * The name of the checkbox button
         */
        "name"?: string;
        /**
          * Event whenever the checked changes
         */
        "onCheckedChange"?: (event: PCheckboxCustomEvent<boolean>) => void;
        /**
          * Event whenever the indeterminate changes
         */
        "onIndeterminateChange"?: (event: PCheckboxCustomEvent<boolean>) => void;
        /**
          * Wether the checkbox is required
         */
        "required"?: boolean;
        /**
          * The size of the checkbox
         */
        "size"?: 'sm' | 'base';
    }
    interface PContentSlider {
        /**
          * Wether to disable auto centering the content
         */
        "disableAutoCenter"?: boolean;
        /**
          * Wether to disable dragging the content
         */
        "disableDrag"?: boolean;
        /**
          * Wether to disable clicking the indicator scrolls content
         */
        "disableIndicatorClick"?: boolean;
        /**
          * Wether to hide the indicator on mobile
         */
        "hideMobileIndicator"?: boolean;
    }
    interface PCounter {
        /**
          * The size of the counter
         */
        "size"?: 'default' | 'mini';
        /**
          * The variant of the counter
         */
        "variant"?: 'info' | 'negative' | 'positive' | 'unbiased';
    }
    interface PCropper {
        /**
          * Event when the value changes
         */
        "onValueChange"?: (event: PCropperCustomEvent<any>) => void;
        /**
          * The return type of the onchange
         */
        "returnType"?: 'canvas' | 'base64';
        /**
          * The image to crop (url or base64)
         */
        "value"?: any;
        /**
          * Variant of the image that's being cropped
         */
        "variant"?: 'user' | 'company';
    }
    interface PDatepicker {
        /**
          * Wether to disable the weekends
         */
        "disableWeekends"?: boolean;
        /**
          * Wether the input group is disabled used by the datepicker
         */
        "disabled"?: boolean;
        /**
          * Disabled dates
         */
        "disabledDates"?: Array<Date | string> | string;
        /**
          * The helper of the input group used by the datepicker
         */
        "error"?: string;
        /**
          * The display & parse format to use
         */
        "format"?: string;
        /**
          * The helper of the input group used by the datepicker
         */
        "helper"?: string;
        /**
          * Hides the icon when filled
         */
        "hideIconWhenFilled"?: boolean;
        /**
          * The label of the input group used by the datepicker
         */
        "label"?: string;
        /**
          * Max date
         */
        "maxDate"?: Date | string;
        /**
          * Min date
         */
        "minDate"?: Date | string;
        /**
          * The mode of the datepicker
         */
        "mode"?: 'year' | 'month' | 'day';
        /**
          * Event when the value changes
         */
        "onValueChange"?: (event: PDatepickerCustomEvent<any>) => void;
        /**
          * The placeholder of the input
         */
        "placeholder"?: string;
        /**
          * The placement of the dropdown
         */
        "placement"?: Placement;
        /**
          * The prefix of the input group used by the datepicker
         */
        "prefix"?: string;
        /**
          * Wethter to automatically preselect today
         */
        "preselectToday"?: boolean;
        /**
          * Wether the field is required
         */
        "required"?: boolean;
        /**
          * The size of the input group used by the datepicker
         */
        "size"?: 'sm' | 'base';
        /**
          * The strategy of the dropdown placement
         */
        "strategy"?: Strategy;
        /**
          * The current value
         */
        "value"?: Date | string | null | undefined;
    }
    interface PDivider {
        /**
          * The variant of the modal body
         */
        "variant"?: 'horizontal' | 'vertical';
    }
    interface PDrawer {
        /**
          * Wether to apply blur to the backdrop
         */
        "applyBlur"?: boolean;
        /**
          * Wether to hide the drawer when the backdrop is clicked
         */
        "backdropClickClose"?: boolean;
        /**
          * Wether the drawer can be closed
         */
        "canClose"?: boolean;
        /**
          * The Header of the drawer
         */
        "header"?: string;
        /**
          * Close click event
         */
        "onCloseClicked"?: (event: PDrawerCustomEvent<{
		event: MouseEvent;
		canClose: boolean;
    source: 'unknown' | 'backdrop' | 'close' | 'event'
	}>) => void;
        /**
          * Closed event
         */
        "onClosed"?: (event: PDrawerCustomEvent<null>) => void;
        /**
          * Wether we should scroll lock the body
         */
        "scrollLock"?: boolean;
        /**
          * Wether to show the drawer or not
         */
        "show"?: boolean;
        /**
          * Wether to show the close on mobile in the header
         */
        "showClose"?: boolean;
    }
    interface PDrawerBody {
        /**
          * The variant of the modal body
         */
        "variant"?: 'default' | 'table';
    }
    interface PDrawerContainer {
        /**
          * Wether the container is closing
         */
        "closing"?: boolean;
    }
    interface PDrawerHeader {
        /**
          * Close click event
         */
        "onClose"?: (event: PDrawerHeaderCustomEvent<MouseEvent>) => void;
        /**
          * Wether to show the close button on mobile
         */
        "showClose"?: boolean;
    }
    interface PDropdown {
        /**
          * Wether to allow overflow in the container
         */
        "allowOverflow"?: boolean;
        /**
          * Wether to apply chevron automatically
         */
        "applyChevron"?: boolean;
        /**
          * Wether to apply the full width
         */
        "applyFullWidth"?: boolean;
        /**
          * Wether to apply the max width
         */
        "applyMaxWidth"?: boolean;
        /**
          * Wether to automatically calculate the width of the menu based on the trigger
         */
        "calculateWidth"?: boolean;
        /**
          * Chevron direction
         */
        "chevronDirection"?: 'up' | 'down';
        /**
          * Chevron position
         */
        "chevronPosition"?: 'start' | 'end';
        /**
          * Wether to automatically close the dropdown menu after clicking inside
         */
        "disableTriggerClick"?: boolean;
        /**
          * Wether to automatically close the dropdown menu after clicking inside
         */
        "insideClick"?: boolean;
        /**
          * The offset of the dropdown menu
         */
        "offset"?: number;
        /**
          * Open change event
         */
        "onIsOpen"?: (event: PDropdownCustomEvent<boolean>) => void;
        /**
          * The content of the dropdown menu
         */
        "placement"?: Placement;
        /**
          * Wether the dropdown container should be scrollable when the threshold is met.
         */
        "scrollable"?: boolean | 'default' | 'large';
        /**
          * Wether to show the dropdown menu
         */
        "show"?: boolean;
        /**
          * The strategy of the dropdown placement
         */
        "strategy"?: Strategy;
        /**
          * Wether to use a portal for the dropdown container
         */
        "usePortal"?: boolean;
    }
    interface PDropdownMenuContainer {
        /**
          * Wether to allow overflow
         */
        "allowOverflow"?: boolean;
        /**
          * The class of the container passed by parent
         */
        "class"?: string;
        /**
          * Wether the container should all available space
         */
        "fullWidth"?: boolean;
        /**
          * Wether the container applies it's max width
         */
        "maxWidth"?: boolean;
        /**
          * Wether the container should be scrollable when the threshold is met.
         */
        "scrollable"?: boolean | 'default' | 'large' | 'xlarge';
    }
    interface PDropdownMenuItem {
        /**
          * Wether the dropdown menu item is active
         */
        "active"?: boolean;
        /**
          * Wether the dropdown menu item has a checkbox
         */
        "checkbox"?: boolean;
        /**
          * Wether the item is disabled
         */
        "disabled"?: boolean;
        /**
          * Wether to enable the hover state
         */
        "enableHover"?: boolean;
        /**
          * Icon of the navigation item
         */
        "icon"?: IconVariant;
        /**
          * wether to use the container for text
         */
        "useContainer"?: boolean;
        /**
          * The variant of the item
         */
        "variant"?: 'default' | 'negative';
    }
    interface PField {
        /**
          * Wether the input group is disabled
         */
        "disabled"?: boolean;
        /**
          * The error to display
         */
        "error"?: string;
        /**
          * The placement of the error popover
         */
        "errorPlacement"?: Placement;
        /**
          * The method to use when focusing the input
         */
        "focusMethod"?: 'focus' | 'click';
        /**
          * Wether the input group is focused
         */
        "focused"?: boolean;
        /**
          * Force show the error tooltip
         */
        "forceShowTooltip"?: boolean;
        /**
          * The helper of the input group
         */
        "helper"?: string;
        /**
          * Icon of the input group
         */
        "icon"?: IconVariant;
        /**
          * Icon flip
         */
        "iconFlip"?: IconFlipOptions;
        /**
          * Icon position
         */
        "iconPosition"?: 'start' | 'end';
        /**
          * Icon rotate
         */
        "iconRotate"?: RotateOptions;
        /**
          * The label of the input group
         */
        "label"?: string;
        /**
          * Event whenever the input ref changes
         */
        "onInputRefChange"?: (event: PFieldCustomEvent<HTMLInputElement | HTMLTextAreaElement>) => void;
        /**
          * Event whenever the value changes
         */
        "onValueChange"?: (event: PFieldCustomEvent<string>) => void;
        /**
          * The template for the optional text
         */
        "optionalTemplate"?: templateFunc;
        /**
          * The placeholder of the input
         */
        "placeholder"?: string;
        /**
          * The prefix of the input group
         */
        "prefix"?: string;
        /**
          * The size of the input group
         */
        "properties"?: any | string;
        /**
          * Wether the field is required
         */
        "required"?: boolean;
        /**
          * Wether to select all text on focus
         */
        "selectAllOnFocus"?: boolean;
        /**
          * The size of the input group
         */
        "size"?: 'sm' | 'base';
        /**
          * The suffix of the input group
         */
        "suffix"?: string;
        /**
          * The type of the input group
         */
        "type"?: HTMLInputTypeAttribute | 'textarea' | 'slot';
        /**
          * The value of the input
         */
        "value"?: string;
    }
    interface PFieldContainer {
        /**
          * The helper of the input group
         */
        "error"?: string | HTMLSlotElement;
        /**
          * The placement of the error popover
         */
        "errorPlacement"?: Placement;
        /**
          * Force show the error tooltip
         */
        "forceShowTooltip"?: boolean;
        /**
          * The helper of the input group
         */
        "helper"?: string | HTMLSlotElement;
        /**
          * The label of the input group
         */
        "label"?: string | HTMLSlotElement;
        "onFocus"?: (event: PFieldContainerCustomEvent<void>) => void;
        /**
          * The template for the optional text
         */
        "optionalTemplate"?: templateFunc1;
        /**
          * Wether the field is required
         */
        "required"?: boolean;
    }
    interface PFloatingMenuContainer {
        /**
          * Weather the container is used in the table
         */
        "usedInTable"?: boolean;
    }
    interface PFloatingMenuItem {
        /**
          * Wether the item is disabled
         */
        "disabled"?: boolean;
        /**
          * Wether it should have a hover effect
         */
        "hover"?: boolean;
    }
    interface PHelper {
        /**
          * The placement of the helper popover
         */
        "placement"?: Placement;
        /**
          * The strategy of the popover placement
         */
        "strategy"?: Strategy;
    }
    interface PIbanIcon {
        /**
          * The iban you want to get an icon for
         */
        "iban"?: string;
        /**
          * The variant of the icon you want toshow
         */
        "variant"?: IbanIconVariant;
    }
    interface PIcon {
        /**
          * Wether to flip the icon horizontally or vertically
         */
        "flip"?: IconFlipOptions1;
        /**
          * Wether to rotate the icon x degrees
         */
        "rotate"?: number;
        /**
          * The size of the icon, using tailwind sizes
         */
        "size"?: TextSizeOptions;
        /**
          * The icon the be displayed
         */
        "variant": IconVariant1;
    }
    interface PIconDeprecated {
        /**
          * Wether to flip the icon horizontally or vertically
         */
        "flip"?: IconFlipOptions;
        /**
          * Wether to rotate the icon x degrees
         */
        "rotate"?: RotateOptions;
        /**
          * The size of the icon, using tailwind sizes
         */
        "size"?: TextSizeOptions;
        /**
          * The icon the be displayed
         */
        "variant": IconDeprecatedVariant;
    }
    interface PIllustration {
        /**
          * The icon the be displayed
         */
        "variant": IllustrationVariant;
    }
    interface PInfoPanel {
        /**
          * Wether the panel can be closed
         */
        "closeable"?: boolean;
        /**
          * The content of the info panel
         */
        "content"?: string;
        /**
          * The header of the info panel
         */
        "header"?: string;
        /**
          * When the backdrop is clicked
         */
        "onClosed"?: (event: PInfoPanelCustomEvent<void>) => void;
        /**
          * The variant of the info panel
         */
        "variant"?: 'info' | 'negative' | 'positive' | 'unbiased';
    }
    interface PInputError {
        /**
          * The error to show
         */
        "error"?: string;
        /**
          * Wether to force show the tooltip
         */
        "forceShowTooltip"?: boolean;
    }
    interface PLabel {
        /**
          * Define the behavior of the label
         */
        "behavior"?: | 'icon'
		| 'circle'
		| 'combination'
		| 'text'
		| 'icon-only';
        /**
          * Icon to show on the label
         */
        "icon"?: IconVariant;
        /**
          * Icon flip
         */
        "iconFlip"?: IconFlipOptions;
        /**
          * Icon position
         */
        "iconPosition"?: 'start' | 'end';
        /**
          * Icon rotate
         */
        "iconRotate"?: RotateOptions1;
        /**
          * Wether to keep the content on mobile
         */
        "keepMobileContent"?: boolean;
        /**
          * The size of the label
         */
        "size"?: 'small' | 'default';
        /**
          * Variant of the label
         */
        "variant"?: | 'neutral'
		| 'positive'
		| 'unbiased'
		| 'negative'
		| 'special'
		| 'info';
    }
    interface PLayout {
        /**
          * Variant of the layout
         */
        "variant"?: 'default' | 'login' | 'office';
    }
    interface PLoader {
        /**
          * Color of the loader
         */
        "color"?: 'indigo' | 'white' | 'storm';
        /**
          * !NOT IMPLEMENTED! Modal description for modal variant
         */
        "modalDescription"?: string;
        /**
          * !NOT IMPLEMENTED! Modal title for modal variant
         */
        "modalTitle"?: string;
        /**
          * Wether to show or hide the loader
         */
        "show"?: boolean | Observable<boolean>;
        /**
          * Variant of loader
         */
        "variant"?: 'inline' | 'full-width' | 'full-screen' | 'modal' | 'ghost';
    }
    interface PModal {
        /**
          * Wether to apply blur to the backdrop
         */
        "applyBlur"?: boolean;
        /**
          * Wether to hide the modal when the backdrop is clicked
         */
        "backdropClickClose"?: boolean;
        /**
          * The Header of the modal
         */
        "header"?: string;
        /**
          * Close click event
         */
        "onCloseClicked"?: (event: PModalCustomEvent<MouseEvent>) => void;
        /**
          * Closed event
         */
        "onClosed"?: (event: PModalCustomEvent<string>) => void;
        /**
          * Wether the body should have padding
         */
        "padding"?: boolean;
        /**
          * Wether we should scroll lock the body
         */
        "scrollLock"?: boolean;
        /**
          * Wether to show the modal or not
         */
        "show"?: boolean;
        /**
          * Wether to show the close button in the header
         */
        "showClose"?: boolean;
        /**
          * Wether to show the footer on mobile
         */
        "showMobileFooter"?: boolean;
        /**
          * The size of the modal container
         */
        "size"?: 'sm' | 'md' | 'lg' | 'xl';
        /**
          * The variant of the modal body
         */
        "variant"?: 'default' | 'table-flush';
    }
    interface PModalBody {
        /**
          * Wether the body should have padding
         */
        "padding"?: boolean;
        /**
          * Wether the modal body should be rounded at the bottom
         */
        "roundedBottom"?: boolean;
        /**
          * Wether the modal body should be rounded at the top
         */
        "roundedTop"?: boolean;
        /**
          * The variant of the modal body
         */
        "variant"?: 'default' | 'table-flush';
    }
    interface PModalContainer {
        /**
          * Wether the container is closing
         */
        "closing"?: boolean;
        /**
          * The size of the modal container
         */
        "size"?: 'sm' | 'md' | 'lg' | 'xl';
    }
    interface PModalFooter {
    }
    interface PModalHeader {
        /**
          * Close click event
         */
        "onClose"?: (event: PModalHeaderCustomEvent<MouseEvent>) => void;
        /**
          * Wether to show the close button on mobile
         */
        "showClose"?: boolean;
    }
    interface PNavbar {
    }
    interface PNavigationItem {
        /**
          * Wether the navigation item is active
         */
        "active"?: boolean;
        /**
          * The element to use for the navigation item
         */
        "as"?: string;
        /**
          * The class of the container passed by parent
         */
        "class"?: string;
        /**
          * Icon of the navigation item
         */
        "counter"?: number | string;
        /**
          * The href of the navigation item
         */
        "href"?: string;
        /**
          * Icon of the navigation item
         */
        "icon": IconVariant;
        /**
          * Wether the navigation item is loading
         */
        "loading"?: boolean;
        /**
          * The target of the navigation item
         */
        "target"?: string;
    }
    interface PNavigationSection {
        /**
          * The header of the section
         */
        "header"?: string;
    }
    interface PNavigationTitle {
    }
    interface PPageSizeSelect {
        /**
          * The size of the button
         */
        "buttonSize"?: 'sm' | 'base';
        /**
          * The template for the data view
         */
        "buttonTemplate"?: templateFunc2;
        /**
          * Chevron position
         */
        "chevronPosition"?: 'start' | 'end';
        /**
          * Wether to hide when there is only 1 page available
         */
        "hidden"?: boolean;
        /**
          * The template for the data view
         */
        "itemTemplate"?: templateFunc2;
        /**
          * Event whenever the size changes
         */
        "onSizeChange"?: (event: PPageSizeSelectCustomEvent<number>) => void;
        /**
          * The current page
         */
        "size"?: number;
        /**
          * The available sizes
         */
        "sizeOptions"?: number[];
    }
    interface PPagination {
        /**
          * Wether to hide when there is only 1 page available
         */
        "hideOnSinglePage"?: boolean;
        /**
          * Event whenever the page changes
         */
        "onPageChange"?: (event: PPaginationCustomEvent<number>) => void;
        /**
          * The current page
         */
        "page"?: number;
        /**
          * The amount of items per page
         */
        "pageSize"?: number;
        /**
          * The total amount of items
         */
        "total": number;
    }
    interface PPaginationItem {
        /**
          * Wether the pagination item is active
         */
        "active"?: boolean;
    }
    interface PPortal {
    }
    interface PProfile {
        /**
          * The position of the dropdown
         */
        "dropdownLocation"?: 'top-end' | 'bottom-end';
    }
    interface PRadio {
        /**
          * Wether the radio is checked
         */
        "checked"?: boolean;
        /**
          * Wether the radio is disabled
         */
        "disabled"?: boolean;
        /**
          * The id of the radio button
         */
        "id"?: string;
        /**
          * The name of the radio button
         */
        "name"?: string;
        /**
          * Event whenever the checked changes
         */
        "onCheckedChange"?: (event: PRadioCustomEvent<boolean>) => void;
        /**
          * Wether the radio is required
         */
        "required"?: boolean;
        /**
          * The size of the radio
         */
        "size"?: 'sm' | 'base';
        /**
          * The value of the radio button
         */
        "value"?: string;
    }
    interface PSegmentContainer {
    }
    interface PSegmentItem {
        /**
          * Wether the segment item is active
         */
        "active"?: boolean;
        /**
          * Icon to show on the segment item
         */
        "icon"?: IconVariant;
        /**
          * Icon flip
         */
        "iconFlip"?: IconFlipOptions;
        /**
          * Wether the segment item is icon only
         */
        "iconOnly"?: boolean;
        /**
          * Icon rotate
         */
        "iconRotate"?: RotateOptions;
        /**
          * Size of the segment item
         */
        "size"?: 'small' | 'big';
    }
    interface PSelect {
        /**
          * The text to show when add item is being shown
         */
        "addItemText"?: string;
        /**
          * Wether to apply the item's class also on the selected item
         */
        "applyClassOnSelectedItem"?: string;
        /**
          * Wether the input uses async filtering
         */
        "asyncFilter"?: boolean;
        /**
          * Wether to automatically select the first item
         */
        "autoSelectFirst"?: boolean;
        /**
          * The placeholder of the input used for auto complete
         */
        "autocompletePlaceholder"?: string;
        /**
          * The key of avatar within an item to show
         */
        "avatarKey"?: string;
        /**
          * The key of avatar letters within an item to show when the avatar url doesn't work
         */
        "avatarLettersKey"?: string;
        /**
          * The key of a class in an item to apply
         */
        "classKey"?: string;
        /**
          * Wether the input group is disabled used by the select
         */
        "disabled"?: boolean;
        /**
          * The key of the object to display
         */
        "displayKey"?: string;
        /**
          * The key of the object to display in the dropdown (overwrites displayKey)
         */
        "dropdownDisplayKey"?: string | undefined;
        /**
          * The text to show when items is empty
         */
        "emptyStateText"?: string;
        /**
          * Wether to enable autocomplete
         */
        "enableAutocomplete"?: boolean;
        /**
          * Wether to show the select all item with multi select
         */
        "enableSelectAll"?: boolean;
        /**
          * The helper of the input group used by the select
         */
        "error"?: string;
        /**
          * The helper of the input group used by the select
         */
        "helper"?: string;
        /**
          * Icon of the select box
         */
        "icon"?: IconVariant;
        /**
          * The key of icon variant within an item to show
         */
        "iconKey"?: string;
        /**
          * The key to identify an object
         */
        "identifierKey"?: string;
        /**
          * The items to show in the dropdown
         */
        "items"?: string | any[];
        /**
          * The label of the input group used by the select
         */
        "label"?: string;
        /**
          * Wether to show loading items
         */
        "loading"?: boolean;
        /**
          * The maximum amount of items to display
         */
        "maxDisplayedItems"?: number;
        /**
          * Wether to enable multi select
         */
        "multi"?: boolean;
        /**
          * Event when the add item is clicked
         */
        "onAdd"?: (event: PSelectCustomEvent<any>) => void;
        /**
          * Event when the dropdown shows
         */
        "onDropdownShown"?: (event: PSelectCustomEvent<any>) => void;
        /**
          * Event when the query of the autocomplete changes
         */
        "onQueryChange"?: (event: PSelectCustomEvent<string>) => void;
        /**
          * Event when the select all item has been selected or not
         */
        "onSelectAllChange"?: (event: PSelectCustomEvent<any>) => void;
        /**
          * Event when the value changes
         */
        "onValueChange"?: (event: PSelectCustomEvent<any>) => void;
        /**
          * The placeholder of the input
         */
        "placeholder"?: string;
        /**
          * The prefix of the input group used by the select
         */
        "prefix"?: string;
        /**
          * The current query
         */
        "query"?: string;
        /**
          * The key of the object to display
         */
        "queryKey"?: string;
        /**
          * Wether the field is required
         */
        "required"?: boolean;
        /**
          * The icon to prefix for select all
         */
        "selectAllIcon"?: IconVariant | undefined;
        /**
          * The text of the select all item
         */
        "selectAllText"?: string;
        /**
          * The key of the object to display in the input (overwrites displayKey)
         */
        "selectionDisplayKey"?: string | undefined;
        /**
          * Wether to show a "add" item
         */
        "showAddItem"?: boolean;
        /**
          * Wether to show the chevron or not
         */
        "showChevron"?: boolean;
        /**
          * Wether to show the icon also on the selected Item
         */
        "showIconInSelectedItem"?: string;
        /**
          * The size of the input group used by the select
         */
        "size"?: 'sm' | 'base';
        /**
          * The current value
         */
        "value"?: any;
        /**
          * The key of the object to return
         */
        "valueKey"?: string;
    }
    interface PSliderIndicator {
        /**
          * Wether the slider indicator is active
         */
        "active"?: boolean;
    }
    interface PStatus {
        /**
          * Icon to show on the status
         */
        "icon"?: IconVariant;
        /**
          * Icon flip
         */
        "iconFlip"?: IconFlipOptions;
        /**
          * Icon rotate
         */
        "iconRotate"?: RotateOptions;
        /**
          * The variant of the status
         */
        "variant"?: 'default' | 'positive' | 'unbiased' | 'negative';
    }
    interface PStepper {
        /**
          * The currently active step
         */
        "activeStep"?: number;
        /**
          * The position of the content in case of vertical direction
         */
        "contentPosition"?: 'start' | 'end';
        /**
          * The direction of the stepper
         */
        "direction"?: 'horizontal' | 'vertical';
        /**
          * Wether to automatically apply active & finished to items
         */
        "enableAutoStatus"?: boolean;
    }
    interface PStepperItem {
        /**
          * Wether the step is active
         */
        "active"?: boolean;
        /**
          * The alignment of the step content
         */
        "align"?: 'start' | 'center' | 'end';
        /**
          * The position of the content in case of vertical direction
         */
        "contentPosition"?: 'start' | 'end';
        /**
          * The direction of the stepper step
         */
        "direction"?: 'horizontal' | 'vertical';
        /**
          * Wether the step is finished
         */
        "finished"?: boolean;
    }
    interface PStepperLine {
        /**
          * Wether the line is active
         */
        "active"?: boolean;
        /**
          * The direction of the stepper line
         */
        "direction"?: 'horizontal' | 'vertical';
    }
    interface PTabGroup {
    }
    interface PTabItem {
        /**
          * Wether the tab item is active
         */
        "active"?: boolean;
    }
    interface PTable {
        /**
          * Wether the action button is enabled
         */
        "actionButtonEnabled"?: boolean;
        /**
          * The action button icon
         */
        "actionButtonIcon"?: IconVariant2;
        /**
          * Wether the action button is loading
         */
        "actionButtonLoading"?: boolean;
        /**
          * The template for the action button text
         */
        "actionButtonTemplate"?: buttonTemplateFunc;
        /**
          * The action button text if changed
         */
        "actionButtonText"?: string;
        /**
          * Active quick filter identifier
         */
        "activeQuickFilterIdentifier"?: string;
        /**
          * The amount of loading rows to show
         */
        "amountOfLoadingRows"?: number;
        /**
          * A key to determine if a row can be selected
         */
        "canSelectKey"?: string;
        "emptyStateAction"?: templateFunc3;
        "emptyStateContent"?: templateFunc3;
        "emptyStateFilteredContent"?: templateFunc3;
        "emptyStateFilteredHeader"?: templateFunc3;
        "emptyStateHeader"?: templateFunc3;
        /**
          * Wether to show the action button
         */
        "enableAction"?: boolean;
        /**
          * Wether to enable empty state action
         */
        "enableEmptyStateAction"?: boolean;
        /**
          * Wether to enable export
         */
        "enableExport"?: boolean;
        /**
          * Wether to show the filter button
         */
        "enableFilter"?: boolean;
        /**
          * Wether to show the filter button on desktop
         */
        "enableFilterDesktop"?: boolean;
        /**
          * Wether to enable the floating menu
         */
        "enableFloatingMenu"?: boolean;
        /**
          * Wether to show the header
         */
        "enableFooter"?: boolean;
        /**
          * Wether to show the header
         */
        "enableHeader"?: boolean;
        /**
          * Wether to enable page size select
         */
        "enablePageSize"?: boolean;
        /**
          * Wether to enable pagination
         */
        "enablePagination"?: boolean;
        /**
          * Wether to enable row clicking
         */
        "enableRowClick"?: boolean;
        /**
          * Wether to enable selection
         */
        "enableRowSelection"?: boolean;
        /**
          * Wether to show the search input
         */
        "enableSearch"?: boolean;
        /**
          * The template for the filter button text
         */
        "filterButtonTemplate"?: templateFunc3;
        /**
          * The template for amount selected item in the floating menu
         */
        "floatingMenuAmountSelectedTemplate"?: amountSelectedTemplateFunc;
        /**
          * Wether the footer should show loading state
         */
        "footerLoading"?: boolean;
        /**
          * Wether the header should show loading state
         */
        "headerLoading"?: boolean;
        /**
          * Wether to hide when there is only 1 page available
         */
        "hideOnSinglePage"?: boolean;
        /**
          * The items to be fed to the table
         */
        "items"?: string;
        /**
          * Wether data is loading
         */
        "loading"?: boolean;
        /**
          * Event when the action button is clicked
         */
        "onAction"?: (event: PTableCustomEvent<null>) => void;
        /**
          * Event whenever the empty state is clicked
         */
        "onEmptyStateActionClick"?: (event: PTableCustomEvent<null>) => void;
        /**
          * Event whenever the page changes
         */
        "onExport"?: (event: PTableCustomEvent<number>) => void;
        /**
          * Event when the filter button is clicked
         */
        "onFilter"?: (event: PTableCustomEvent<null>) => void;
        /**
          * Event when the table has rendered
         */
        "onHasRendered"?: (event: PTableCustomEvent<number>) => void;
        /**
          * Event whenever the page changes
         */
        "onPageChange"?: (event: PTableCustomEvent<number>) => void;
        /**
          * Event whenever the page changes
         */
        "onPageSizeChange"?: (event: PTableCustomEvent<number>) => void;
        /**
          * Event when the query changes
         */
        "onQueryChange"?: (event: PTableCustomEvent<string>) => void;
        /**
          * Event when one of the quick filters is clicked
         */
        "onQuickFilter"?: (event: PTableCustomEvent<QuickFilter>) => void;
        /**
          * Event whenever a row is clicked
         */
        "onRowClick"?: (event: PTableCustomEvent<RowClickEvent>) => void;
        /**
          * Event whenever a row is deselected
         */
        "onRowDeselected"?: (event: PTableCustomEvent<any>) => void;
        /**
          * Event whenever a row is selected
         */
        "onRowSelected"?: (event: PTableCustomEvent<any>) => void;
        /**
          * Event whenever the current selection changes
         */
        "onSelectedRowsChange"?: (event: PTableCustomEvent<any>) => void;
        /**
          * The current page
         */
        "page"?: number;
        /**
          * The amount of items per page
         */
        "pageSize"?: number;
        /**
          * The options for the page size
         */
        "pageSizeOptions"?: number[];
        /**
          * The query to show in the search bar
         */
        "query"?: string;
        /**
          * Quick filters to show
         */
        "quickFilters"?: QuickFilter[];
        /**
          * A limit to the amount of rows that can be selected
         */
        "rowSelectionLimit"?: number | undefined;
        /**
          * The amount of filters being selected
         */
        "selectedFiltersAmount"?: number;
        /**
          * The current selection of items
         */
        "selectedRows"?: any[];
        /**
          * The key to determine if a row is selected
         */
        "selectionKey"?: string;
        "shadow"?: boolean;
        /**
          * The total amount of items
         */
        "total": number;
    }
    interface PTableCell {
        /**
          * The checkbox to show
         */
        "checkbox"?: any;
        /**
          * The definition of the table column
         */
        "definition"?: TableColumn;
        /**
          * The index of the column
         */
        "index"?: number;
        /**
          * The item in question
         */
        "item"?: any;
        /**
          * The index of the row
         */
        "rowIndex"?: number;
        /**
          * Wether the table has actions
         */
        "tableHasActions"?: boolean;
        /**
          * The template to show
         */
        "template"?: TableDefinitionTemplateFunc;
        /**
          * The value of the column
         */
        "value"?: any;
        /**
          * The variant of the column
         */
        "variant"?: 'default' | 'loading' | 'header' | 'actions';
    }
    interface PTableColumn {
        /**
          * The alignment of the column
         */
        "align"?: 'start' | 'center' | 'end';
        /**
          * Wether the column should have a checkbox
         */
        "hasCheckbox"?: boolean;
        /**
          * Wether the column is the last in the row
         */
        "isLast"?: { [key: string]: boolean };
        /**
          * The name of the column
         */
        "name"?: string;
        /**
          * Event to let the table know it has to re render
         */
        "onTableDefinitionChanged"?: (event: PTableColumnCustomEvent<boolean>) => void;
        /**
          * Parsed sizes based on the complete set of columns
         */
        "parsedSizes"?: | TableColumnSizes
		| undefined;
        /**
          * The path of the value of the item you want to display
         */
        "path"?: string;
        /**
          * The sizes of the column
         */
        "sizes"?: | 'auto'
		| 'hidden'
		| 'full'
		| number
		| TableColumnSizes;
        /**
          * The type of the column
         */
        "type"?: 'td' | 'th';
        /**
          * Wether the column should use the slot
         */
        "useSlot"?: boolean;
    }
    interface PTableContainer {
        "shadow"?: boolean;
    }
    interface PTableFooter {
        /**
          * Wether to enable export
         */
        "enableExport"?: boolean;
        /**
          * Wether to enable page size select
         */
        "enablePageSize"?: boolean;
        /**
          * Wether to enable pagination
         */
        "enablePagination"?: boolean;
        /**
          * Wether to hide when there is only 1 page available
         */
        "hideOnSinglePage"?: boolean;
        /**
          * Wether we want to show loading state
         */
        "loading"?: boolean;
        /**
          * Event whenever the page changes
         */
        "onExport"?: (event: PTableFooterCustomEvent<number>) => void;
        /**
          * Event whenever the page changes
         */
        "onPageChange"?: (event: PTableFooterCustomEvent<number>) => void;
        /**
          * Event whenever the page changes
         */
        "onPageSizeChange"?: (event: PTableFooterCustomEvent<number>) => void;
        /**
          * The current page
         */
        "page"?: number;
        /**
          * The amount of items per page
         */
        "pageSize"?: number;
        /**
          * The options for the page size
         */
        "pageSizeOptions"?: number[];
        /**
          * The total amount of items
         */
        "total": number;
    }
    interface PTableHeader {
        /**
          * The template for the action button text
         */
        "actionButtonTemplate"?: buttonTemplateFunc1;
        /**
          * The action button icon
         */
        "actionIcon"?: IconVariant2;
        /**
          * Wether the action button is loading
         */
        "actionLoading"?: boolean;
        /**
          * The action button text if changed
         */
        "actionText"?: string;
        /**
          * Active quick filter identifier
         */
        "activeQuickFilterIdentifier"?: string;
        /**
          * Wether to enable the action button
         */
        "canUseAction"?: boolean;
        /**
          * Wether to show the action button
         */
        "enableAction"?: boolean;
        /**
          * Wether to show the filter button
         */
        "enableFilter"?: boolean;
        /**
          * Wether to show the filter button on desktop
         */
        "enableFilterDesktop"?: boolean;
        /**
          * Wether to show the search input
         */
        "enableSearch"?: boolean;
        /**
          * The template for the filter button text
         */
        "filterButtonTemplate"?: templateFunc4;
        /**
          * The amount of items that are selected
         */
        "itemsSelectedAmount"?: number;
        /**
          * Wether we want to show loading state
         */
        "loading"?: boolean;
        /**
          * Event when the action button is clicked
         */
        "onAction"?: (event: PTableHeaderCustomEvent<null>) => void;
        /**
          * Event when the filter button is clicked
         */
        "onFilter"?: (event: PTableHeaderCustomEvent<null>) => void;
        /**
          * Event when the query changes
         */
        "onQueryChange"?: (event: PTableHeaderCustomEvent<string>) => void;
        /**
          * Event when one of the quick filters is clicked
         */
        "onQuickFilter"?: (event: PTableHeaderCustomEvent<QuickFilter>) => void;
        /**
          * The query to show in the search bar
         */
        "query"?: string;
        /**
          * Quick filters to show
         */
        "quickFilters"?: QuickFilter[];
        /**
          * The amount of filters being selected
         */
        "selectedFiltersAmount"?: number;
    }
    interface PTableRow {
        /**
          * Enable hover
         */
        "enableHover"?: boolean;
        /**
          * Variant of the header
         */
        "variant"?: 'default' | 'header';
    }
    interface PTableRowAction {
        /**
          * The action to trigger when used
         */
        "action"?: TableRowActionFunc;
        /**
          * Wether the action is disabled
         */
        "disabled"?: boolean;
        /**
          * Icon to show on the button
         */
        "icon"?: IconVariant2;
        /**
          * Icon flip
         */
        "iconFlip"?: IconFlipOptions2;
        /**
          * Wether the button is icon only
         */
        "iconOnly"?: boolean;
        /**
          * Icon rotate
         */
        "iconRotate"?: RotateOptions2;
        /**
          * Label of the action
         */
        "label"?: string;
        /**
          * Wether the action is loading
         */
        "loading"?: boolean;
        /**
          * A function for row actions of type "single" or "both" that determines if the action is shown on the row
         */
        "showFunction"?: TableRowActionShowFunc;
        /**
          * The type of action mutli = Only multi select action single = Only an action on the row both = Action on both locations
         */
        "type"?: 'both' | 'single' | 'multi';
    }
    interface PToast {
        /**
          * Icon to show on the button
         */
        "actionIcon"?: IconVariant;
        /**
          * Icon flip
         */
        "actionIconFlip"?: IconFlipOptions;
        /**
          * Icon rotate
         */
        "actionIconRotate"?: RotateOptions1;
        /**
          * The content of the toast
         */
        "content"?: string;
        /**
          * Wether to enable the close button
         */
        "enableAction"?: boolean;
        /**
          * The header of the toast
         */
        "header"?: string;
        /**
          * Button click event
         */
        "onAction"?: (event: PToastCustomEvent<MouseEvent>) => void;
        /**
          * The variant of the toast
         */
        "variant"?: 'positive' | 'unbiased' | 'negative';
    }
    interface PToastContainer {
        /**
          * The placement of the container
         */
        "placement"?: 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end';
    }
    interface PToggle {
        /**
          * Wether the checkbox is checked
         */
        "checked"?: boolean;
        /**
          * Wether the checkbox is disabled
         */
        "disabled"?: boolean;
        /**
          * The id of the checkbox button
         */
        "id"?: string;
        /**
          * Wether the checkbox is in indeterminate state
         */
        "indeterminate"?: boolean;
        /**
          * The name of the checkbox button
         */
        "name"?: string;
        /**
          * Event whenever the checked changes
         */
        "onCheckedChange"?: (event: PToggleCustomEvent<boolean>) => void;
        /**
          * Event whenever the indeterminate changes
         */
        "onIndeterminateChange"?: (event: PToggleCustomEvent<boolean>) => void;
        /**
          * Wether the checkbox is required
         */
        "required"?: boolean;
        /**
          * The size of the checkbox
         */
        "size"?: 'sm' | 'base';
    }
    interface PTooltip {
        /**
          * Wether to someone can manually close the popover
         */
        "canManuallyClose"?: boolean;
        /**
          * The content of the popover
         */
        "content"?: any;
        /**
          * Wether the tooltip can be shown by user input
         */
        "enableUserInput"?: boolean;
        /**
          * The offset of the popover
         */
        "offset"?: number;
        /**
          * Open change event
         */
        "onIsOpen"?: (event: PTooltipCustomEvent<boolean>) => void;
        /**
          * The placement of the popover
         */
        "placement"?: Placement;
        /**
          * Wether to show the popover
         */
        "show"?: boolean;
        /**
          * The strategy of the popover placement
         */
        "strategy"?: Strategy;
        /**
          * Wether to use a portal for the tooltip
         */
        "usePortal"?: boolean;
        /**
          * The variant of the popover
         */
        "variant"?: 'hover' | 'click' | 'error';
    }
    interface IntrinsicElements {
        "p-accordion": PAccordion;
        "p-attachment": PAttachment;
        "p-avatar": PAvatar;
        "p-avatar-group": PAvatarGroup;
        "p-backdrop": PBackdrop;
        "p-badge": PBadge;
        "p-button": PButton;
        "p-button-group": PButtonGroup;
        "p-calendar": PCalendar;
        "p-card-body": PCardBody;
        "p-card-container": PCardContainer;
        "p-card-header": PCardHeader;
        "p-checkbox": PCheckbox;
        "p-content-slider": PContentSlider;
        "p-counter": PCounter;
        "p-cropper": PCropper;
        "p-datepicker": PDatepicker;
        "p-divider": PDivider;
        "p-drawer": PDrawer;
        "p-drawer-body": PDrawerBody;
        "p-drawer-container": PDrawerContainer;
        "p-drawer-header": PDrawerHeader;
        "p-dropdown": PDropdown;
        "p-dropdown-menu-container": PDropdownMenuContainer;
        "p-dropdown-menu-item": PDropdownMenuItem;
        "p-field": PField;
        "p-field-container": PFieldContainer;
        "p-floating-menu-container": PFloatingMenuContainer;
        "p-floating-menu-item": PFloatingMenuItem;
        "p-helper": PHelper;
        "p-iban-icon": PIbanIcon;
        "p-icon": PIcon;
        "p-icon-deprecated": PIconDeprecated;
        "p-illustration": PIllustration;
        "p-info-panel": PInfoPanel;
        "p-input-error": PInputError;
        "p-label": PLabel;
        "p-layout": PLayout;
        "p-loader": PLoader;
        "p-modal": PModal;
        "p-modal-body": PModalBody;
        "p-modal-container": PModalContainer;
        "p-modal-footer": PModalFooter;
        "p-modal-header": PModalHeader;
        "p-navbar": PNavbar;
        "p-navigation-item": PNavigationItem;
        "p-navigation-section": PNavigationSection;
        "p-navigation-title": PNavigationTitle;
        "p-page-size-select": PPageSizeSelect;
        "p-pagination": PPagination;
        "p-pagination-item": PPaginationItem;
        "p-portal": PPortal;
        "p-profile": PProfile;
        "p-radio": PRadio;
        "p-segment-container": PSegmentContainer;
        "p-segment-item": PSegmentItem;
        "p-select": PSelect;
        "p-slider-indicator": PSliderIndicator;
        "p-status": PStatus;
        "p-stepper": PStepper;
        "p-stepper-item": PStepperItem;
        "p-stepper-line": PStepperLine;
        "p-tab-group": PTabGroup;
        "p-tab-item": PTabItem;
        "p-table": PTable;
        "p-table-cell": PTableCell;
        "p-table-column": PTableColumn;
        "p-table-container": PTableContainer;
        "p-table-footer": PTableFooter;
        "p-table-header": PTableHeader;
        "p-table-row": PTableRow;
        "p-table-row-action": PTableRowAction;
        "p-toast": PToast;
        "p-toast-container": PToastContainer;
        "p-toggle": PToggle;
        "p-tooltip": PTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "p-accordion": LocalJSX.PAccordion & JSXBase.HTMLAttributes<HTMLPAccordionElement>;
            "p-attachment": LocalJSX.PAttachment & JSXBase.HTMLAttributes<HTMLPAttachmentElement>;
            "p-avatar": LocalJSX.PAvatar & JSXBase.HTMLAttributes<HTMLPAvatarElement>;
            "p-avatar-group": LocalJSX.PAvatarGroup & JSXBase.HTMLAttributes<HTMLPAvatarGroupElement>;
            "p-backdrop": LocalJSX.PBackdrop & JSXBase.HTMLAttributes<HTMLPBackdropElement>;
            "p-badge": LocalJSX.PBadge & JSXBase.HTMLAttributes<HTMLPBadgeElement>;
            "p-button": LocalJSX.PButton & JSXBase.HTMLAttributes<HTMLPButtonElement>;
            "p-button-group": LocalJSX.PButtonGroup & JSXBase.HTMLAttributes<HTMLPButtonGroupElement>;
            "p-calendar": LocalJSX.PCalendar & JSXBase.HTMLAttributes<HTMLPCalendarElement>;
            "p-card-body": LocalJSX.PCardBody & JSXBase.HTMLAttributes<HTMLPCardBodyElement>;
            "p-card-container": LocalJSX.PCardContainer & JSXBase.HTMLAttributes<HTMLPCardContainerElement>;
            "p-card-header": LocalJSX.PCardHeader & JSXBase.HTMLAttributes<HTMLPCardHeaderElement>;
            "p-checkbox": LocalJSX.PCheckbox & JSXBase.HTMLAttributes<HTMLPCheckboxElement>;
            "p-content-slider": LocalJSX.PContentSlider & JSXBase.HTMLAttributes<HTMLPContentSliderElement>;
            "p-counter": LocalJSX.PCounter & JSXBase.HTMLAttributes<HTMLPCounterElement>;
            "p-cropper": LocalJSX.PCropper & JSXBase.HTMLAttributes<HTMLPCropperElement>;
            "p-datepicker": LocalJSX.PDatepicker & JSXBase.HTMLAttributes<HTMLPDatepickerElement>;
            "p-divider": LocalJSX.PDivider & JSXBase.HTMLAttributes<HTMLPDividerElement>;
            "p-drawer": LocalJSX.PDrawer & JSXBase.HTMLAttributes<HTMLPDrawerElement>;
            "p-drawer-body": LocalJSX.PDrawerBody & JSXBase.HTMLAttributes<HTMLPDrawerBodyElement>;
            "p-drawer-container": LocalJSX.PDrawerContainer & JSXBase.HTMLAttributes<HTMLPDrawerContainerElement>;
            "p-drawer-header": LocalJSX.PDrawerHeader & JSXBase.HTMLAttributes<HTMLPDrawerHeaderElement>;
            "p-dropdown": LocalJSX.PDropdown & JSXBase.HTMLAttributes<HTMLPDropdownElement>;
            "p-dropdown-menu-container": LocalJSX.PDropdownMenuContainer & JSXBase.HTMLAttributes<HTMLPDropdownMenuContainerElement>;
            "p-dropdown-menu-item": LocalJSX.PDropdownMenuItem & JSXBase.HTMLAttributes<HTMLPDropdownMenuItemElement>;
            "p-field": LocalJSX.PField & JSXBase.HTMLAttributes<HTMLPFieldElement>;
            "p-field-container": LocalJSX.PFieldContainer & JSXBase.HTMLAttributes<HTMLPFieldContainerElement>;
            "p-floating-menu-container": LocalJSX.PFloatingMenuContainer & JSXBase.HTMLAttributes<HTMLPFloatingMenuContainerElement>;
            "p-floating-menu-item": LocalJSX.PFloatingMenuItem & JSXBase.HTMLAttributes<HTMLPFloatingMenuItemElement>;
            "p-helper": LocalJSX.PHelper & JSXBase.HTMLAttributes<HTMLPHelperElement>;
            "p-iban-icon": LocalJSX.PIbanIcon & JSXBase.HTMLAttributes<HTMLPIbanIconElement>;
            "p-icon": LocalJSX.PIcon & JSXBase.HTMLAttributes<HTMLPIconElement>;
            "p-icon-deprecated": LocalJSX.PIconDeprecated & JSXBase.HTMLAttributes<HTMLPIconDeprecatedElement>;
            "p-illustration": LocalJSX.PIllustration & JSXBase.HTMLAttributes<HTMLPIllustrationElement>;
            "p-info-panel": LocalJSX.PInfoPanel & JSXBase.HTMLAttributes<HTMLPInfoPanelElement>;
            "p-input-error": LocalJSX.PInputError & JSXBase.HTMLAttributes<HTMLPInputErrorElement>;
            "p-label": LocalJSX.PLabel & JSXBase.HTMLAttributes<HTMLPLabelElement>;
            "p-layout": LocalJSX.PLayout & JSXBase.HTMLAttributes<HTMLPLayoutElement>;
            "p-loader": LocalJSX.PLoader & JSXBase.HTMLAttributes<HTMLPLoaderElement>;
            "p-modal": LocalJSX.PModal & JSXBase.HTMLAttributes<HTMLPModalElement>;
            "p-modal-body": LocalJSX.PModalBody & JSXBase.HTMLAttributes<HTMLPModalBodyElement>;
            "p-modal-container": LocalJSX.PModalContainer & JSXBase.HTMLAttributes<HTMLPModalContainerElement>;
            "p-modal-footer": LocalJSX.PModalFooter & JSXBase.HTMLAttributes<HTMLPModalFooterElement>;
            "p-modal-header": LocalJSX.PModalHeader & JSXBase.HTMLAttributes<HTMLPModalHeaderElement>;
            "p-navbar": LocalJSX.PNavbar & JSXBase.HTMLAttributes<HTMLPNavbarElement>;
            "p-navigation-item": LocalJSX.PNavigationItem & JSXBase.HTMLAttributes<HTMLPNavigationItemElement>;
            "p-navigation-section": LocalJSX.PNavigationSection & JSXBase.HTMLAttributes<HTMLPNavigationSectionElement>;
            "p-navigation-title": LocalJSX.PNavigationTitle & JSXBase.HTMLAttributes<HTMLPNavigationTitleElement>;
            "p-page-size-select": LocalJSX.PPageSizeSelect & JSXBase.HTMLAttributes<HTMLPPageSizeSelectElement>;
            "p-pagination": LocalJSX.PPagination & JSXBase.HTMLAttributes<HTMLPPaginationElement>;
            "p-pagination-item": LocalJSX.PPaginationItem & JSXBase.HTMLAttributes<HTMLPPaginationItemElement>;
            "p-portal": LocalJSX.PPortal & JSXBase.HTMLAttributes<HTMLPPortalElement>;
            "p-profile": LocalJSX.PProfile & JSXBase.HTMLAttributes<HTMLPProfileElement>;
            "p-radio": LocalJSX.PRadio & JSXBase.HTMLAttributes<HTMLPRadioElement>;
            "p-segment-container": LocalJSX.PSegmentContainer & JSXBase.HTMLAttributes<HTMLPSegmentContainerElement>;
            "p-segment-item": LocalJSX.PSegmentItem & JSXBase.HTMLAttributes<HTMLPSegmentItemElement>;
            "p-select": LocalJSX.PSelect & JSXBase.HTMLAttributes<HTMLPSelectElement>;
            "p-slider-indicator": LocalJSX.PSliderIndicator & JSXBase.HTMLAttributes<HTMLPSliderIndicatorElement>;
            "p-status": LocalJSX.PStatus & JSXBase.HTMLAttributes<HTMLPStatusElement>;
            "p-stepper": LocalJSX.PStepper & JSXBase.HTMLAttributes<HTMLPStepperElement>;
            "p-stepper-item": LocalJSX.PStepperItem & JSXBase.HTMLAttributes<HTMLPStepperItemElement>;
            "p-stepper-line": LocalJSX.PStepperLine & JSXBase.HTMLAttributes<HTMLPStepperLineElement>;
            "p-tab-group": LocalJSX.PTabGroup & JSXBase.HTMLAttributes<HTMLPTabGroupElement>;
            "p-tab-item": LocalJSX.PTabItem & JSXBase.HTMLAttributes<HTMLPTabItemElement>;
            "p-table": LocalJSX.PTable & JSXBase.HTMLAttributes<HTMLPTableElement>;
            "p-table-cell": LocalJSX.PTableCell & JSXBase.HTMLAttributes<HTMLPTableCellElement>;
            "p-table-column": LocalJSX.PTableColumn & JSXBase.HTMLAttributes<HTMLPTableColumnElement>;
            "p-table-container": LocalJSX.PTableContainer & JSXBase.HTMLAttributes<HTMLPTableContainerElement>;
            "p-table-footer": LocalJSX.PTableFooter & JSXBase.HTMLAttributes<HTMLPTableFooterElement>;
            "p-table-header": LocalJSX.PTableHeader & JSXBase.HTMLAttributes<HTMLPTableHeaderElement>;
            "p-table-row": LocalJSX.PTableRow & JSXBase.HTMLAttributes<HTMLPTableRowElement>;
            "p-table-row-action": LocalJSX.PTableRowAction & JSXBase.HTMLAttributes<HTMLPTableRowActionElement>;
            "p-toast": LocalJSX.PToast & JSXBase.HTMLAttributes<HTMLPToastElement>;
            "p-toast-container": LocalJSX.PToastContainer & JSXBase.HTMLAttributes<HTMLPToastContainerElement>;
            "p-toggle": LocalJSX.PToggle & JSXBase.HTMLAttributes<HTMLPToggleElement>;
            "p-tooltip": LocalJSX.PTooltip & JSXBase.HTMLAttributes<HTMLPTooltipElement>;
        }
    }
}
